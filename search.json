[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement sachamber@fredhutch.org. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 sixtyfour authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sean Kross. Author. Scott Chamberlain. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kross S, Chamberlain S (2023). sixtyfour: Humane Interface AWS. R package version 0.0.0.91, https://github.com/getwilds/sixtyfour.","code":"@Manual{,   title = {sixtyfour: Humane Interface to AWS},   author = {Sean Kross and Scott Chamberlain},   year = {2023},   note = {R package version 0.0.0.91},   url = {https://github.com/getwilds/sixtyfour}, }"},{"path":"/index.html","id":"sixtyfour","dir":"","previous_headings":"","what":"Humane Interface to AWS","title":"Humane Interface to AWS","text":"science-focused, humane R interface AWS.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Humane Interface to AWS","text":"Development version package CRAN (yet)","code":"# install.packages(\"pak\") pak::pkg_install(\"getwilds/sixtyfour\")"},{"path":"/index.html","id":"sixtyfour-high-level-organization","dir":"","previous_headings":"","what":"sixtyfour high level organization","title":"Humane Interface to AWS","text":"aws_billing: get AWS billing details aws_bucket*: manage S3 buckets aws_file_*: manage files S3 buckets AWS aws_user*: manage users AWS aws_db*: interact AWS databases","code":""},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Humane Interface to AWS","text":"’ll need two AWS secrets AWS region:","code":"Sys.setenv(   AWS_ACCESS_KEY_ID = \"\",   AWS_SECRET_ACCESS_KEY = \"\",   AWS_REGION = \"us-west-2\" )"},{"path":"/index.html","id":"setting-the-interface","dir":"","previous_headings":"","what":"Setting the interface","title":"Humane Interface to AWS","text":"function sixtyfour::set_s3_interface makes easier toggle S3 compatible backends; right now supporting AWS S3 Minio.","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Humane Interface to AWS","text":"Please note sixtyfour project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/reference/as_policy_arn.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a policy name to a policy ARN — as_policy_arn","title":"Convert a policy name to a policy ARN — as_policy_arn","text":"Convert policy name policy ARN","code":""},{"path":"/reference/as_policy_arn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a policy name to a policy ARN — as_policy_arn","text":"","code":"as_policy_arn(name)"},{"path":"/reference/as_policy_arn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a policy name to a policy ARN — as_policy_arn","text":"name (character) policy name arn","code":""},{"path":"/reference/as_policy_arn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a policy name to a policy ARN — as_policy_arn","text":"policy ARN","code":""},{"path":"/reference/as_policy_arn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert a policy name to a policy ARN — as_policy_arn","text":"uses exact matching; fails error match; beware validation done user input policy arn","code":""},{"path":"/reference/as_policy_arn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a policy name to a policy ARN — as_policy_arn","text":"","code":"if (FALSE) { as_policy_arn(\"ReadOnlyAccess\") as_policy_arn(\"arn:aws:iam::aws:policy/ReadOnlyAccess\") as_policy_arn(\"AmazonRDSDataFullAccess\") # as_policy_arn(\"Blarp\") # as_policy_arn(letters) # as_policy_arn(5) }"},{"path":"/reference/aws_bucket_acl_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a bucket ACL — aws_bucket_acl_get","title":"Get a bucket ACL — aws_bucket_acl_get","text":"Get bucket ACL","code":""},{"path":"/reference/aws_bucket_acl_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a bucket ACL — aws_bucket_acl_get","text":"","code":"aws_bucket_acl_get(bucket)"},{"path":"/reference/aws_bucket_acl_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a bucket ACL — aws_bucket_acl_get","text":"bucket (character) bucket name. required","code":""},{"path":"/reference/aws_bucket_acl_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a bucket ACL — aws_bucket_acl_get","text":"named list, slots: Owner, Grants","code":""},{"path":"/reference/aws_bucket_acl_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a bucket ACL — aws_bucket_acl_get","text":"see docs https://www.paws-r-sdk.com/docs/s3_get_bucket_acl/","code":""},{"path":"/reference/aws_bucket_acl_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a bucket ACL — aws_bucket_acl_get","text":"","code":"if (FALSE) { aws_bucket_acl_get(\"s3://s64-test-2\") }"},{"path":"/reference/aws_bucket_acl_modify.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify a bucket ACL — aws_bucket_acl_modify","title":"Modify a bucket ACL — aws_bucket_acl_modify","text":"NOTE: tested access edit ACLs","code":""},{"path":"/reference/aws_bucket_acl_modify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify a bucket ACL — aws_bucket_acl_modify","text":"","code":"aws_bucket_acl_modify(bucket, acl, ...)"},{"path":"/reference/aws_bucket_acl_modify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify a bucket ACL — aws_bucket_acl_modify","text":"bucket (character) bucket name. required acl (character) canned ACL apply bucket. required ... named params passed https://www.paws-r-sdk.com/docs/s3_put_bucket_acl/","code":""},{"path":"/reference/aws_bucket_acl_modify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify a bucket ACL — aws_bucket_acl_modify","text":"","code":"if (FALSE) { aws_bucket_acl_modify(\"s3://s64-test-2\", acl = \"authenticated-read\") aws_bucket_acl_get(\"s3://s64-test-2\") }"},{"path":"/reference/aws_bucket_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an S3 bucket — aws_bucket_create","title":"Create an S3 bucket — aws_bucket_create","text":"Create S3 bucket","code":""},{"path":"/reference/aws_bucket_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an S3 bucket — aws_bucket_create","text":"","code":"aws_bucket_create(bucket, ...)"},{"path":"/reference/aws_bucket_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an S3 bucket — aws_bucket_create","text":"bucket (character) bucket name. required ... named parameters passed list_objects","code":""},{"path":"/reference/aws_bucket_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an S3 bucket — aws_bucket_create","text":"bucket path (character)","code":""},{"path":"/reference/aws_bucket_create.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create an S3 bucket — aws_bucket_create","text":"Requires env var AWS_REGION","code":""},{"path":"/reference/aws_bucket_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an S3 bucket — aws_bucket_create","text":"","code":"if (FALSE) { aws_bucket_create(bucket = \"s64-test-2\") }"},{"path":"/reference/aws_bucket_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete an S3 bucket — aws_bucket_delete","title":"Delete an S3 bucket — aws_bucket_delete","text":"Delete S3 bucket","code":""},{"path":"/reference/aws_bucket_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete an S3 bucket — aws_bucket_delete","text":"","code":"aws_bucket_delete(bucket, force = FALSE, ...)"},{"path":"/reference/aws_bucket_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete an S3 bucket — aws_bucket_delete","text":"bucket (character) bucket name. required force (logical) force deletion without going prompt. default: FALSE. set TRUE required non-interactive use. ... named parameters passed delete_bucket","code":""},{"path":"/reference/aws_bucket_delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete an S3 bucket — aws_bucket_delete","text":"empty list","code":""},{"path":"/reference/aws_bucket_delete.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Delete an S3 bucket — aws_bucket_delete","text":"Requires env var AWS_REGION. function prompts make sure want delete bucket.","code":""},{"path":"/reference/aws_bucket_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete an S3 bucket — aws_bucket_delete","text":"","code":"if (FALSE) { aws_bucket_create(bucket = \"bucket-to-delete-111\") aws_buckets() aws_bucket_delete(bucket = \"bucket-to-delete-111\") aws_buckets() }"},{"path":"/reference/aws_bucket_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download an S3 bucket — aws_bucket_download","title":"Download an S3 bucket — aws_bucket_download","text":"Download S3 bucket","code":""},{"path":"/reference/aws_bucket_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download an S3 bucket — aws_bucket_download","text":"","code":"aws_bucket_download(bucket, dest_path, ...)"},{"path":"/reference/aws_bucket_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download an S3 bucket — aws_bucket_download","text":"bucket (character) bucket name. required dest_path (character) destination directory store files. required ... named parameters passed s3fs::s3_dir_download()","code":""},{"path":"/reference/aws_bucket_download.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Download an S3 bucket — aws_bucket_download","text":"Requires env var AWS_REGION. function prompts make sure want delete bucket.","code":""},{"path":"/reference/aws_bucket_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download an S3 bucket — aws_bucket_download","text":"","code":"if (FALSE) { aws_bucket_create(bucket = \"tmp-bucket-369\") desc_file <- file.path(system.file(), \"DESCRIPTION\") aws_file_upload(bucket = \"tmp-bucket-369\", path = desc_file) aws_file_upload(bucket = \"tmp-bucket-369\", path = desc_file, key = \"d_file\") temp_dir <- file.path(tempdir(), \"tmp-bucket-369\") aws_bucket_download(bucket = \"tmp-bucket-369\", dest_path = temp_dir)  # cleanup aws_bucket_delete(\"tmp-bucket-369\") }"},{"path":"/reference/aws_bucket_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an S3 bucket — aws_bucket_exists","title":"Create an S3 bucket — aws_bucket_exists","text":"Create S3 bucket","code":""},{"path":"/reference/aws_bucket_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an S3 bucket — aws_bucket_exists","text":"","code":"aws_bucket_exists(bucket)"},{"path":"/reference/aws_bucket_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an S3 bucket — aws_bucket_exists","text":"bucket (character) bucket name. required","code":""},{"path":"/reference/aws_bucket_exists.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create an S3 bucket — aws_bucket_exists","text":"internally uses head_bucket","code":""},{"path":"/reference/aws_bucket_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an S3 bucket — aws_bucket_exists","text":"","code":"if (FALSE) { # exists aws_bucket_exists(bucket = \"s64-test-2\") # does not exist aws_bucket_exists(bucket = \"no-bucket\") }"},{"path":"/reference/aws_bucket_list_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"List objects in an S3 bucket — aws_bucket_list_objects","title":"List objects in an S3 bucket — aws_bucket_list_objects","text":"List objects S3 bucket","code":""},{"path":"/reference/aws_bucket_list_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List objects in an S3 bucket — aws_bucket_list_objects","text":"","code":"aws_bucket_list_objects(bucket, ...)"},{"path":"/reference/aws_bucket_list_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List objects in an S3 bucket — aws_bucket_list_objects","text":"bucket (character) bucket name. required ... named parameters passed s3fs::s3_dir_info()","code":""},{"path":"/reference/aws_bucket_list_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List objects in an S3 bucket — aws_bucket_list_objects","text":"objects found, empty tibble. tibble rows S3 bucket, 8 columns: bucket_name (character) key (character) uri (character) size (fs::bytes) type (character) owner (character) etag (character) last_modified (dttm)","code":""},{"path":"/reference/aws_bucket_list_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List objects in an S3 bucket — aws_bucket_list_objects","text":"","code":"if (FALSE) { aws_bucket_list_objects(bucket = \"s64-test-2\") }"},{"path":"/reference/aws_bucket_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a tree of the objects in a bucket — aws_bucket_tree","title":"Print a tree of the objects in a bucket — aws_bucket_tree","text":"Print tree objects bucket","code":""},{"path":"/reference/aws_bucket_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a tree of the objects in a bucket — aws_bucket_tree","text":"","code":"aws_bucket_tree(bucket, recurse = TRUE, ...)"},{"path":"/reference/aws_bucket_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a tree of the objects in a bucket — aws_bucket_tree","text":"bucket (character) bucket name. required recurse (logical) returns AWS S3 objects lower sub directories, default: TRUE ... Additional arguments passed s3fs::s3_dir_tree()","code":""},{"path":"/reference/aws_bucket_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a tree of the objects in a bucket — aws_bucket_tree","text":"character vector objects/files within bucket, printed tree","code":""},{"path":"/reference/aws_bucket_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a tree of the objects in a bucket — aws_bucket_tree","text":"","code":"if (FALSE) { aws_bucket_tree(\"s3://s64-test-2\") }"},{"path":"/reference/aws_bucket_upload.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload a folder of files to create an S3 bucket — aws_bucket_upload","title":"Upload a folder of files to create an S3 bucket — aws_bucket_upload","text":"Upload folder files create S3 bucket","code":""},{"path":"/reference/aws_bucket_upload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload a folder of files to create an S3 bucket — aws_bucket_upload","text":"","code":"aws_bucket_upload(path, bucket, max_batch = fs::fs_bytes(\"100MB\"), ...)"},{"path":"/reference/aws_bucket_upload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload a folder of files to create an S3 bucket — aws_bucket_upload","text":"path (character) local path directory. required bucket (character) bucket name. required max_batch (fs_bytes) maximum batch size uploaded multipart ... named parameters passed s3fs::s3_dir_upload()","code":""},{"path":"/reference/aws_bucket_upload.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Upload a folder of files to create an S3 bucket — aws_bucket_upload","text":"Requires env var AWS_REGION. function prompts make sure want delete bucket.","code":""},{"path":"/reference/aws_bucket_upload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload a folder of files to create an S3 bucket — aws_bucket_upload","text":"","code":"if (FALSE) { library(fs) tdir <- path(tempdir(), \"apples\") dir.create(tdir) tfiles <- replicate(n = 10, file_temp(tmp_dir = tdir, ext = \".txt\")) invisible(lapply(tfiles, function(x) write.csv(mtcars, x)))  aws_bucket_upload(path = tdir, bucket = \"a-new-bucket-345\") aws_bucket_list_objects(\"a-new-bucket-345\")  # cleanup objs <- aws_bucket_list_objects(\"a-new-bucket-345\") aws_file_delete(objs$uri) aws_bucket_delete(\"a-new-bucket-345\") }"},{"path":"/reference/aws_buckets.html","id":null,"dir":"Reference","previous_headings":"","what":"List S3 buckets — aws_buckets","title":"List S3 buckets — aws_buckets","text":"List S3 buckets","code":""},{"path":"/reference/aws_buckets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List S3 buckets — aws_buckets","text":"","code":"aws_buckets(...)"},{"path":"/reference/aws_buckets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List S3 buckets — aws_buckets","text":"... named parameters passed s3fs::s3_dir_info()","code":""},{"path":"/reference/aws_buckets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List S3 buckets — aws_buckets","text":"objects found, empty tibble. tibble rows S3 bucket, 8 columns: bucket_name (character) key (character) uri (character) size (fs::bytes) type (character) owner (character) etag (character) last_modified (dttm)","code":""},{"path":"/reference/aws_buckets.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"List S3 buckets — aws_buckets","text":"set refresh=TRUE internally make sure return date information buckets rather cached locally","code":""},{"path":"/reference/aws_buckets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List S3 buckets — aws_buckets","text":"","code":"if (FALSE) { aws_buckets() }"},{"path":"/reference/aws_file_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"File attributes — aws_file_attr","title":"File attributes — aws_file_attr","text":"File attributes","code":""},{"path":"/reference/aws_file_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File attributes — aws_file_attr","text":"","code":"aws_file_attr(remote_path)"},{"path":"/reference/aws_file_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File attributes — aws_file_attr","text":"remote_path (character) one remote S3 paths. required","code":""},{"path":"/reference/aws_file_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File attributes — aws_file_attr","text":"tibble many columns, number rows matching length remote_path","code":""},{"path":"/reference/aws_file_attr.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"File attributes — aws_file_attr","text":"uses s3fs::s3_file_info() internally","code":""},{"path":"/reference/aws_file_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File attributes — aws_file_attr","text":"","code":"if (FALSE) { # files one by one aws_file_attr(s3_path(\"s64-test-2\", \"DESCRIPTION\")) aws_file_attr(s3_path(\"s64-test-2\", \"ddd\")) aws_file_attr(s3_path(\"s64-test-2\", \"doesntexist\")) # or all together aws_file_attr(s3_path(\"s64-test-2\", c(\"DESCRIPTION\", \"ddd\"))) }"},{"path":"/reference/aws_file_copy.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy files between buckets — aws_file_copy","title":"Copy files between buckets — aws_file_copy","text":"Copy files buckets","code":""},{"path":"/reference/aws_file_copy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy files between buckets — aws_file_copy","text":"","code":"aws_file_copy(remote_path, bucket, ...)"},{"path":"/reference/aws_file_copy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy files between buckets — aws_file_copy","text":"remote_path (character) one remote S3 paths. required bucket (character) bucket copy files . required. bucket exist prompt asking youl'd like bucket created ... named parameters passed s3fs::s3_file_copy()","code":""},{"path":"/reference/aws_file_copy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy files between buckets — aws_file_copy","text":"vector paths, length matches length(remote_path)","code":""},{"path":"/reference/aws_file_copy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy files between buckets — aws_file_copy","text":"","code":"if (FALSE) { # create files in an existinb bucket tfiles <- replicate(n = 3, tempfile()) for (i in tfiles) cat(\"Hello\\nWorld\\n\", file = i) paths <- s3_path(\"s64-test-2\", c(\"aaa\", \"bbb\", \"ccc\"), ext = \"txt\") aws_file_upload(tfiles, paths)  # create a new bucket new_bucket <- aws_bucket_create(bucket = \"s64-test-3\")  # add existing files to the new bucket aws_file_copy(paths, path_as_s3(new_bucket)) # create bucket that doesn't exist yet aws_file_copy(paths, \"s64-test-4\") }"},{"path":"/reference/aws_file_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a file — aws_file_delete","title":"Delete a file — aws_file_delete","text":"Delete file","code":""},{"path":"/reference/aws_file_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a file — aws_file_delete","text":"","code":"aws_file_delete(remote_path, ...)"},{"path":"/reference/aws_file_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a file — aws_file_delete","text":"remote_path (character) one remote S3 paths. required ... named parameters passed s3fs::s3_file_delete()","code":""},{"path":"/reference/aws_file_delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a file — aws_file_delete","text":"(character) vector remote file paths","code":""},{"path":"/reference/aws_file_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a file — aws_file_delete","text":"","code":"if (FALSE) { # create a file tfile <- tempfile() cat(\"Hello World!\", file = tfile) aws_file_upload(remote_path = \"s3://s64-test-2\", path = tfile)  # delete the file aws_file_delete(s3_path(\"s64-test-2\", basename(tfile)))  # file does not exist - no error is raised aws_file_delete(s3_path(\"s64-test-2\", \"TESTING123\")) }"},{"path":"/reference/aws_file_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a file — aws_file_download","title":"Download a file — aws_file_download","text":"Download file","code":""},{"path":"/reference/aws_file_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a file — aws_file_download","text":"","code":"aws_file_download(remote_path, path, ...)"},{"path":"/reference/aws_file_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a file — aws_file_download","text":"remote_path (character) one remote S3 paths. required path (character) one file paths write . required ... named parameters passed s3fs::s3_file_download()","code":""},{"path":"/reference/aws_file_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a file — aws_file_download","text":"(character) vector local file paths","code":""},{"path":"/reference/aws_file_download.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Download a file — aws_file_download","text":"USES FORK s3fs MINOR FIX MAKES LENGTH>1 INPUTS WORK","code":""},{"path":"/reference/aws_file_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a file — aws_file_download","text":"","code":"if (FALSE) { tfile <- tempfile() aws_file_download(remote_path = \"s3://s64-test-2/DESCRIPTION\", path = tfile)  # many files tfiles <- replicate(n = 3, tempfile()) aws_file_download(   remote_path =     s3_path(\"s64-test-2\", c(\"a_file\", \"c_file\", \"d_file\")), path = tfiles )  ## length of `remote_path` and `path` must be the same tfiles <- replicate(n = 2, tempfile()) aws_file_download(   remote_path =     s3_path(\"s64-test-2\", c(\"a_file\", \"c_file\", \"d_file\")), path = tfiles )  # S3 file does not exist temp_path <- tempfile() aws_file_download(s3_path(\"s64-test-2\", \"TESTING123\"), temp_path) }"},{"path":"/reference/aws_file_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a file exists — aws_file_exists","title":"Check if a file exists — aws_file_exists","text":"Check file exists","code":""},{"path":"/reference/aws_file_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a file exists — aws_file_exists","text":"","code":"aws_file_exists(remote_path)"},{"path":"/reference/aws_file_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a file exists — aws_file_exists","text":"remote_path (character) one remote S3 paths. required","code":""},{"path":"/reference/aws_file_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a file exists — aws_file_exists","text":"vector booleans (TRUE FALSE), length matches length(remote_path)","code":""},{"path":"/reference/aws_file_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a file exists — aws_file_exists","text":"","code":"if (FALSE) { aws_file_exists(s3_path(\"s64-test-2\", \"DESCRIPTION\")) aws_file_exists(s3_path(\"s64-test-2\", \"doesntexist\")) aws_file_exists(s3_path(\"s64-test-2\", c(\"DESCRIPTION\", \"doesntexist\"))) }"},{"path":"/reference/aws_file_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename a remote file — aws_file_rename","title":"Rename a remote file — aws_file_rename","text":"Rename remote file","code":""},{"path":"/reference/aws_file_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename a remote file — aws_file_rename","text":"","code":"aws_file_rename(remote_path, new_remote_path, ...)"},{"path":"/reference/aws_file_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename a remote file — aws_file_rename","text":"remote_path (character) one remote S3 paths. required new_remote_path (character) one remote S3 paths. required. length must match remote_path ... named parameters passed s3fs::s3_file_move()","code":""},{"path":"/reference/aws_file_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename a remote file — aws_file_rename","text":"vector paths, length matches length(remote_path)","code":""},{"path":"/reference/aws_file_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename a remote file — aws_file_rename","text":"","code":"if (FALSE) { aws_file_rename(s3_path(\"s64-test-2\", \"DESCRIPTION\"),   s3_path(\"s64-test-2\", \"DESC\"))  tfiles <- replicate(n = 3, tempfile()) for (i in tfiles) cat(\"Hello\\nWorld\\n\", file = i) paths <- s3_path(\"s64-test-2\", c(\"aaa\", \"bbb\", \"ccc\"), ext = \"txt\") aws_file_upload(tfiles, paths) new_paths <- s3_path(\"s64-test-2\", c(\"new_aaa\", \"new_bbb\", \"new_ccc\"),   ext = \"txt\") aws_file_rename(paths, new_paths) }"},{"path":"/reference/aws_file_upload.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload a file — aws_file_upload","title":"Upload a file — aws_file_upload","text":"Upload file","code":""},{"path":"/reference/aws_file_upload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload a file — aws_file_upload","text":"","code":"aws_file_upload(path, remote_path, ...)"},{"path":"/reference/aws_file_upload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload a file — aws_file_upload","text":"path (character) file path read . required remote_path (character) remote path file go. required ... named parameters passed s3fs::s3_file_copy()","code":""},{"path":"/reference/aws_file_upload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload a file — aws_file_upload","text":"(character) vector remote s3 paths","code":""},{"path":"/reference/aws_file_upload.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Upload a file — aws_file_upload","text":"upload: exist created download: exist, function return error","code":""},{"path":"/reference/aws_file_upload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload a file — aws_file_upload","text":"","code":"if (FALSE) { demo_rds_file <- file.path(system.file(), \"Meta/demo.rds\") aws_file_upload(   demo_rds_file,   s3_path(\"s64-test-2\", basename(demo_rds_file)) )  ## many files at once links_file <- file.path(system.file(), \"Meta/links.rds\") aws_file_upload(   c(demo_rds_file, links_file),   s3_path(\"s64-test-2\", c(basename(demo_rds_file), basename(links_file))) )  # set expiration, expire 1 minute from now aws_file_upload(demo_rds_file, s3_path(\"s64-test-2\", \"ddd.rds\"),   Expires = Sys.time() + 60 )  # bucket doesn't exist aws_file_upload(demo_rds_file, \"s3://not-a-bucket/eee.rds\") }  if (FALSE) { # interactive() # path doesn't exist aws_file_upload(   \"file_doesnt_exist.txt\",   s3_path(\"s64-test-2\", \"file_doesnt_exist.txt\") ) }"},{"path":"/reference/aws_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a group — aws_group","title":"Get a group — aws_group","text":"Get group","code":""},{"path":"/reference/aws_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a group — aws_group","text":"","code":"aws_group(name)"},{"path":"/reference/aws_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a group — aws_group","text":"name (character) group name","code":""},{"path":"/reference/aws_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a group — aws_group","text":"named list slots : group: information group (tibble) users: users group (tibble) policies (character) attached_policies (tibble)","code":""},{"path":"/reference/aws_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a group — aws_group","text":"see docs https://www.paws-r-sdk.com/docs/iam_get_group/","code":""},{"path":"/reference/aws_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a group — aws_group","text":"","code":"if (FALSE) { aws_group(name=\"users\") }"},{"path":"/reference/aws_group_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a group — aws_group_create","title":"Create a group — aws_group_create","text":"Create group","code":""},{"path":"/reference/aws_group_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a group — aws_group_create","text":"","code":"aws_group_create(name, path = NULL)"},{"path":"/reference/aws_group_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a group — aws_group_create","text":"name (character) group name. required path (character) path group name. optional. included, defaults slash (/).","code":""},{"path":"/reference/aws_group_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a group — aws_group_create","text":"tibble information group created","code":""},{"path":"/reference/aws_group_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a group — aws_group_create","text":"See https://www.paws-r-sdk.com/docs/iam_create_group/ docs details parameters","code":""},{"path":"/reference/aws_group_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a group — aws_group_create","text":"","code":"if (FALSE) { aws_group_create(\"testgroup\") }"},{"path":"/reference/aws_group_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a group — aws_group_delete","title":"Delete a group — aws_group_delete","text":"Delete group","code":""},{"path":"/reference/aws_group_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a group — aws_group_delete","text":"","code":"aws_group_delete(name)"},{"path":"/reference/aws_group_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a group — aws_group_delete","text":"name (character) group name. required","code":""},{"path":"/reference/aws_group_delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a group — aws_group_delete","text":"empty list","code":""},{"path":"/reference/aws_group_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete a group — aws_group_delete","text":"See https://www.paws-r-sdk.com/docs/iam_delete_group/ docs details","code":""},{"path":"/reference/aws_group_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a group — aws_group_delete","text":"","code":"if (FALSE) { aws_group_delete(name = \"testgroup\") }"},{"path":"/reference/aws_group_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a group exists — aws_group_exists","title":"Check if a group exists — aws_group_exists","text":"Check group exists","code":""},{"path":"/reference/aws_group_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a group exists — aws_group_exists","text":"","code":"aws_group_exists(name)"},{"path":"/reference/aws_group_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a group exists — aws_group_exists","text":"name (character) group name","code":""},{"path":"/reference/aws_group_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a group exists — aws_group_exists","text":"single boolean","code":""},{"path":"/reference/aws_group_exists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if a group exists — aws_group_exists","text":"uses aws_group internally. see docs https://www.paws-r-sdk.com/docs/iam_get_group/","code":""},{"path":"/reference/aws_group_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a group exists — aws_group_exists","text":"","code":"if (FALSE) { aws_group_exists(name=\"users\") aws_group_exists(name=\"apples\") }"},{"path":"/reference/aws_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"List all groups or groups for a single user — aws_groups","title":"List all groups or groups for a single user — aws_groups","text":"List groups groups single user","code":""},{"path":"/reference/aws_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all groups or groups for a single user — aws_groups","text":"","code":"aws_groups(username = NULL, ...)"},{"path":"/reference/aws_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all groups or groups for a single user — aws_groups","text":"username (character) username. optional ... parameters passed paws list_groups_for_user username non-NULL, otherwise passed list_users","code":""},{"path":"/reference/aws_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all groups or groups for a single user — aws_groups","text":"tibble information groups","code":""},{"path":"/reference/aws_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all groups or groups for a single user — aws_groups","text":"","code":"if (FALSE) { aws_groups() aws_groups(username = aws_user_current()) }"},{"path":"/reference/aws_iam_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the paws Identity and Access Management (IAM) client — aws_iam_client","title":"Get the paws Identity and Access Management (IAM) client — aws_iam_client","text":"Get paws Identity Access Management (IAM) client","code":""},{"path":"/reference/aws_iam_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the paws Identity and Access Management (IAM) client — aws_iam_client","text":"","code":"aws_iam_client()"},{"path":"/reference/aws_iam_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the paws Identity and Access Management (IAM) client — aws_iam_client","text":"list methods interfacing IAM; see https://www.paws-r-sdk.com/docs/iam/","code":""},{"path":"/reference/aws_iam_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the paws Identity and Access Management (IAM) client — aws_iam_client","text":"","code":"aws_iam_client() #> $add_client_id_to_open_id_connect_provider #> function (OpenIDConnectProviderArn, ClientID)  #> { #>     op <- new_operation(name = \"AddClientIDToOpenIDConnectProvider\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$add_client_id_to_open_id_connect_provider_input(OpenIDConnectProviderArn = OpenIDConnectProviderArn,  #>         ClientID = ClientID) #>     output <- .iam$add_client_id_to_open_id_connect_provider_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02e4010> #> <environment: namespace:paws.security.identity> #>  #> $add_role_to_instance_profile #> function (InstanceProfileName, RoleName)  #> { #>     op <- new_operation(name = \"AddRoleToInstanceProfile\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$add_role_to_instance_profile_input(InstanceProfileName = InstanceProfileName,  #>         RoleName = RoleName) #>     output <- .iam$add_role_to_instance_profile_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02e19e0> #> <environment: namespace:paws.security.identity> #>  #> $add_user_to_group #> function (GroupName, UserName)  #> { #>     op <- new_operation(name = \"AddUserToGroup\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$add_user_to_group_input(GroupName = GroupName,  #>         UserName = UserName) #>     output <- .iam$add_user_to_group_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02d9a50> #> <environment: namespace:paws.security.identity> #>  #> $attach_group_policy #> function (GroupName, PolicyArn)  #> { #>     op <- new_operation(name = \"AttachGroupPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$attach_group_policy_input(GroupName = GroupName,  #>         PolicyArn = PolicyArn) #>     output <- .iam$attach_group_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02cbd60> #> <environment: namespace:paws.security.identity> #>  #> $attach_role_policy #> function (RoleName, PolicyArn)  #> { #>     op <- new_operation(name = \"AttachRolePolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$attach_role_policy_input(RoleName = RoleName,  #>         PolicyArn = PolicyArn) #>     output <- .iam$attach_role_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0293960> #> <environment: namespace:paws.security.identity> #>  #> $attach_user_policy #> function (UserName, PolicyArn)  #> { #>     op <- new_operation(name = \"AttachUserPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$attach_user_policy_input(UserName = UserName,  #>         PolicyArn = PolicyArn) #>     output <- .iam$attach_user_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0292060> #> <environment: namespace:paws.security.identity> #>  #> $change_password #> function (OldPassword, NewPassword)  #> { #>     op <- new_operation(name = \"ChangePassword\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$change_password_input(OldPassword = OldPassword,  #>         NewPassword = NewPassword) #>     output <- .iam$change_password_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f026a9c8> #> <environment: namespace:paws.security.identity> #>  #> $create_access_key #> function (UserName = NULL)  #> { #>     op <- new_operation(name = \"CreateAccessKey\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$create_access_key_input(UserName = UserName) #>     output <- .iam$create_access_key_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0266bf8> #> <environment: namespace:paws.security.identity> #>  #> $create_account_alias #> function (AccountAlias)  #> { #>     op <- new_operation(name = \"CreateAccountAlias\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$create_account_alias_input(AccountAlias = AccountAlias) #>     output <- .iam$create_account_alias_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0262488> #> <environment: namespace:paws.security.identity> #>  #> $create_group #> function (Path = NULL, GroupName)  #> { #>     op <- new_operation(name = \"CreateGroup\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$create_group_input(Path = Path, GroupName = GroupName) #>     output <- .iam$create_group_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f025f998> #> <environment: namespace:paws.security.identity> #>  #> $create_instance_profile #> function (InstanceProfileName, Path = NULL, Tags = NULL)  #> { #>     op <- new_operation(name = \"CreateInstanceProfile\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$create_instance_profile_input(InstanceProfileName = InstanceProfileName,  #>         Path = Path, Tags = Tags) #>     output <- .iam$create_instance_profile_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0260d10> #> <environment: namespace:paws.security.identity> #>  #> $create_login_profile #> function (UserName, Password, PasswordResetRequired = NULL)  #> { #>     op <- new_operation(name = \"CreateLoginProfile\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$create_login_profile_input(UserName = UserName,  #>         Password = Password, PasswordResetRequired = PasswordResetRequired) #>     output <- .iam$create_login_profile_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0256ee0> #> <environment: namespace:paws.security.identity> #>  #> $create_open_id_connect_provider #> function (Url, ClientIDList = NULL, ThumbprintList, Tags = NULL)  #> { #>     op <- new_operation(name = \"CreateOpenIDConnectProvider\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$create_open_id_connect_provider_input(Url = Url,  #>         ClientIDList = ClientIDList, ThumbprintList = ThumbprintList,  #>         Tags = Tags) #>     output <- .iam$create_open_id_connect_provider_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0254620> #> <environment: namespace:paws.security.identity> #>  #> $create_policy #> function (PolicyName, Path = NULL, PolicyDocument, Description = NULL,  #>     Tags = NULL)  #> { #>     op <- new_operation(name = \"CreatePolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$create_policy_input(PolicyName = PolicyName,  #>         Path = Path, PolicyDocument = PolicyDocument, Description = Description,  #>         Tags = Tags) #>     output <- .iam$create_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0255c70> #> <environment: namespace:paws.security.identity> #>  #> $create_policy_version #> function (PolicyArn, PolicyDocument, SetAsDefault = NULL)  #> { #>     op <- new_operation(name = \"CreatePolicyVersion\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$create_policy_version_input(PolicyArn = PolicyArn,  #>         PolicyDocument = PolicyDocument, SetAsDefault = SetAsDefault) #>     output <- .iam$create_policy_version_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0253458> #> <environment: namespace:paws.security.identity> #>  #> $create_role #> function (Path = NULL, RoleName, AssumeRolePolicyDocument, Description = NULL,  #>     MaxSessionDuration = NULL, PermissionsBoundary = NULL, Tags = NULL)  #> { #>     op <- new_operation(name = \"CreateRole\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$create_role_input(Path = Path, RoleName = RoleName,  #>         AssumeRolePolicyDocument = AssumeRolePolicyDocument,  #>         Description = Description, MaxSessionDuration = MaxSessionDuration,  #>         PermissionsBoundary = PermissionsBoundary, Tags = Tags) #>     output <- .iam$create_role_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0250c78> #> <environment: namespace:paws.security.identity> #>  #> $create_saml_provider #> function (SAMLMetadataDocument, Name, Tags = NULL)  #> { #>     op <- new_operation(name = \"CreateSAMLProvider\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$create_saml_provider_input(SAMLMetadataDocument = SAMLMetadataDocument,  #>         Name = Name, Tags = Tags) #>     output <- .iam$create_saml_provider_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f024e578> #> <environment: namespace:paws.security.identity> #>  #> $create_service_linked_role #> function (AWSServiceName, Description = NULL, CustomSuffix = NULL)  #> { #>     op <- new_operation(name = \"CreateServiceLinkedRole\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$create_service_linked_role_input(AWSServiceName = AWSServiceName,  #>         Description = Description, CustomSuffix = CustomSuffix) #>     output <- .iam$create_service_linked_role_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f024a690> #> <environment: namespace:paws.security.identity> #>  #> $create_service_specific_credential #> function (UserName, ServiceName)  #> { #>     op <- new_operation(name = \"CreateServiceSpecificCredential\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$create_service_specific_credential_input(UserName = UserName,  #>         ServiceName = ServiceName) #>     output <- .iam$create_service_specific_credential_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f024bae8> #> <environment: namespace:paws.security.identity> #>  #> $create_user #> function (Path = NULL, UserName, PermissionsBoundary = NULL,  #>     Tags = NULL)  #> { #>     op <- new_operation(name = \"CreateUser\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$create_user_input(Path = Path, UserName = UserName,  #>         PermissionsBoundary = PermissionsBoundary, Tags = Tags) #>     output <- .iam$create_user_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02490d8> #> <environment: namespace:paws.security.identity> #>  #> $create_virtual_mfa_device #> function (Path = NULL, VirtualMFADeviceName, Tags = NULL)  #> { #>     op <- new_operation(name = \"CreateVirtualMFADevice\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$create_virtual_mfa_device_input(Path = Path,  #>         VirtualMFADeviceName = VirtualMFADeviceName, Tags = Tags) #>     output <- .iam$create_virtual_mfa_device_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0247340> #> <environment: namespace:paws.security.identity> #>  #> $deactivate_mfa_device #> function (UserName, SerialNumber)  #> { #>     op <- new_operation(name = \"DeactivateMFADevice\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$deactivate_mfa_device_input(UserName = UserName,  #>         SerialNumber = SerialNumber) #>     output <- .iam$deactivate_mfa_device_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0244968> #> <environment: namespace:paws.security.identity> #>  #> $delete_access_key #> function (UserName = NULL, AccessKeyId)  #> { #>     op <- new_operation(name = \"DeleteAccessKey\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_access_key_input(UserName = UserName,  #>         AccessKeyId = AccessKeyId) #>     output <- .iam$delete_access_key_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0245ce0> #> <environment: namespace:paws.security.identity> #>  #> $delete_account_alias #> function (AccountAlias)  #> { #>     op <- new_operation(name = \"DeleteAccountAlias\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_account_alias_input(AccountAlias = AccountAlias) #>     output <- .iam$delete_account_alias_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02431b8> #> <environment: namespace:paws.security.identity> #>  #> $delete_account_password_policy #> function ()  #> { #>     op <- new_operation(name = \"DeleteAccountPasswordPolicy\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$delete_account_password_policy_input() #>     output <- .iam$delete_account_password_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0244450> #> <environment: namespace:paws.security.identity> #>  #> $delete_group #> function (GroupName)  #> { #>     op <- new_operation(name = \"DeleteGroup\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_group_input(GroupName = GroupName) #>     output <- .iam$delete_group_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02418b8> #> <environment: namespace:paws.security.identity> #>  #> $delete_group_policy #> function (GroupName, PolicyName)  #> { #>     op <- new_operation(name = \"DeleteGroupPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_group_policy_input(GroupName = GroupName,  #>         PolicyName = PolicyName) #>     output <- .iam$delete_group_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f023ed90> #> <environment: namespace:paws.security.identity> #>  #> $delete_instance_profile #> function (InstanceProfileName)  #> { #>     op <- new_operation(name = \"DeleteInstanceProfile\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_instance_profile_input(InstanceProfileName = InstanceProfileName) #>     output <- .iam$delete_instance_profile_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02400d0> #> <environment: namespace:paws.security.identity> #>  #> $delete_login_profile #> function (UserName)  #> { #>     op <- new_operation(name = \"DeleteLoginProfile\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_login_profile_input(UserName = UserName) #>     output <- .iam$delete_login_profile_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f023d538> #> <environment: namespace:paws.security.identity> #>  #> $delete_open_id_connect_provider #> function (OpenIDConnectProviderArn)  #> { #>     op <- new_operation(name = \"DeleteOpenIDConnectProvider\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$delete_open_id_connect_provider_input(OpenIDConnectProviderArn = OpenIDConnectProviderArn) #>     output <- .iam$delete_open_id_connect_provider_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f023a9d8> #> <environment: namespace:paws.security.identity> #>  #> $delete_policy #> function (PolicyArn)  #> { #>     op <- new_operation(name = \"DeletePolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_policy_input(PolicyArn = PolicyArn) #>     output <- .iam$delete_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f023bc38> #> <environment: namespace:paws.security.identity> #>  #> $delete_policy_version #> function (PolicyArn, VersionId)  #> { #>     op <- new_operation(name = \"DeletePolicyVersion\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_policy_version_input(PolicyArn = PolicyArn,  #>         VersionId = VersionId) #>     output <- .iam$delete_policy_version_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0237180> #> <environment: namespace:paws.security.identity> #>  #> $delete_role #> function (RoleName)  #> { #>     op <- new_operation(name = \"DeleteRole\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_role_input(RoleName = RoleName) #>     output <- .iam$delete_role_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0238488> #> <environment: namespace:paws.security.identity> #>  #> $delete_role_permissions_boundary #> function (RoleName)  #> { #>     op <- new_operation(name = \"DeleteRolePermissionsBoundary\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$delete_role_permissions_boundary_input(RoleName = RoleName) #>     output <- .iam$delete_role_permissions_boundary_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02359d0> #> <environment: namespace:paws.security.identity> #>  #> $delete_role_policy #> function (RoleName, PolicyName)  #> { #>     op <- new_operation(name = \"DeleteRolePolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_role_policy_input(RoleName = RoleName,  #>         PolicyName = PolicyName) #>     output <- .iam$delete_role_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02336c0> #> <environment: namespace:paws.security.identity> #>  #> $delete_saml_provider #> function (SAMLProviderArn)  #> { #>     op <- new_operation(name = \"DeleteSAMLProvider\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_saml_provider_input(SAMLProviderArn = SAMLProviderArn) #>     output <- .iam$delete_saml_provider_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0234ae0> #> <environment: namespace:paws.security.identity> #>  #> $delete_ssh_public_key #> function (UserName, SSHPublicKeyId)  #> { #>     op <- new_operation(name = \"DeleteSSHPublicKey\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_ssh_public_key_input(UserName = UserName,  #>         SSHPublicKeyId = SSHPublicKeyId) #>     output <- .iam$delete_ssh_public_key_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0232098> #> <environment: namespace:paws.security.identity> #>  #> $delete_server_certificate #> function (ServerCertificateName)  #> { #>     op <- new_operation(name = \"DeleteServerCertificate\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_server_certificate_input(ServerCertificateName = ServerCertificateName) #>     output <- .iam$delete_server_certificate_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f022f810> #> <environment: namespace:paws.security.identity> #>  #> $delete_service_linked_role #> function (RoleName)  #> { #>     op <- new_operation(name = \"DeleteServiceLinkedRole\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_service_linked_role_input(RoleName = RoleName) #>     output <- .iam$delete_service_linked_role_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0230aa8> #> <environment: namespace:paws.security.identity> #>  #> $delete_service_specific_credential #> function (UserName = NULL, ServiceSpecificCredentialId)  #> { #>     op <- new_operation(name = \"DeleteServiceSpecificCredential\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$delete_service_specific_credential_input(UserName = UserName,  #>         ServiceSpecificCredentialId = ServiceSpecificCredentialId) #>     output <- .iam$delete_service_specific_credential_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f022c060> #> <environment: namespace:paws.security.identity> #>  #> $delete_signing_certificate #> function (UserName = NULL, CertificateId)  #> { #>     op <- new_operation(name = \"DeleteSigningCertificate\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_signing_certificate_input(UserName = UserName,  #>         CertificateId = CertificateId) #>     output <- .iam$delete_signing_certificate_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02276c0> #> <environment: namespace:paws.security.identity> #>  #> $delete_user #> function (UserName)  #> { #>     op <- new_operation(name = \"DeleteUser\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_user_input(UserName = UserName) #>     output <- .iam$delete_user_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02289c8> #> <environment: namespace:paws.security.identity> #>  #> $delete_user_permissions_boundary #> function (UserName)  #> { #>     op <- new_operation(name = \"DeleteUserPermissionsBoundary\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$delete_user_permissions_boundary_input(UserName = UserName) #>     output <- .iam$delete_user_permissions_boundary_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0223ed8> #> <environment: namespace:paws.security.identity> #>  #> $delete_user_policy #> function (UserName, PolicyName)  #> { #>     op <- new_operation(name = \"DeleteUserPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_user_policy_input(UserName = UserName,  #>         PolicyName = PolicyName) #>     output <- .iam$delete_user_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0225170> #> <environment: namespace:paws.security.identity> #>  #> $delete_virtual_mfa_device #> function (SerialNumber)  #> { #>     op <- new_operation(name = \"DeleteVirtualMFADevice\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$delete_virtual_mfa_device_input(SerialNumber = SerialNumber) #>     output <- .iam$delete_virtual_mfa_device_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0220728> #> <environment: namespace:paws.security.identity> #>  #> $detach_group_policy #> function (GroupName, PolicyArn)  #> { #>     op <- new_operation(name = \"DetachGroupPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$detach_group_policy_input(GroupName = GroupName,  #>         PolicyArn = PolicyArn) #>     output <- .iam$detach_group_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f021db90> #> <environment: namespace:paws.security.identity> #>  #> $detach_role_policy #> function (RoleName, PolicyArn)  #> { #>     op <- new_operation(name = \"DetachRolePolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$detach_role_policy_input(RoleName = RoleName,  #>         PolicyArn = PolicyArn) #>     output <- .iam$detach_role_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f021ef08> #> <environment: namespace:paws.security.identity> #>  #> $detach_user_policy #> function (UserName, PolicyArn)  #> { #>     op <- new_operation(name = \"DetachUserPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$detach_user_policy_input(UserName = UserName,  #>         PolicyArn = PolicyArn) #>     output <- .iam$detach_user_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f021c450> #> <environment: namespace:paws.security.identity> #>  #> $enable_mfa_device #> function (UserName, SerialNumber, AuthenticationCode1, AuthenticationCode2)  #> { #>     op <- new_operation(name = \"EnableMFADevice\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$enable_mfa_device_input(UserName = UserName,  #>         SerialNumber = SerialNumber, AuthenticationCode1 = AuthenticationCode1,  #>         AuthenticationCode2 = AuthenticationCode2) #>     output <- .iam$enable_mfa_device_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0217b68> #> <environment: namespace:paws.security.identity> #>  #> $generate_credential_report #> function ()  #> { #>     op <- new_operation(name = \"GenerateCredentialReport\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$generate_credential_report_input() #>     output <- .iam$generate_credential_report_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0218fc0> #> <environment: namespace:paws.security.identity> #>  #> $generate_organizations_access_report #> function (EntityPath, OrganizationsPolicyId = NULL)  #> { #>     op <- new_operation(name = \"GenerateOrganizationsAccessReport\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$generate_organizations_access_report_input(EntityPath = EntityPath,  #>         OrganizationsPolicyId = OrganizationsPolicyId) #>     output <- .iam$generate_organizations_access_report_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f020c890> #> <environment: namespace:paws.security.identity> #>  #> $generate_service_last_accessed_details #> function (Arn, Granularity = NULL)  #> { #>     op <- new_operation(name = \"GenerateServiceLastAccessedDetails\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$generate_service_last_accessed_details_input(Arn = Arn,  #>         Granularity = Granularity) #>     output <- .iam$generate_service_last_accessed_details_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f020dcb0> #> <environment: namespace:paws.security.identity> #>  #> $get_access_key_last_used #> function (AccessKeyId)  #> { #>     op <- new_operation(name = \"GetAccessKeyLastUsed\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_access_key_last_used_input(AccessKeyId = AccessKeyId) #>     output <- .iam$get_access_key_last_used_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0209268> #> <environment: namespace:paws.security.identity> #>  #> $get_account_authorization_details #> function (Filter = NULL, MaxItems = NULL, Marker = NULL)  #> { #>     op <- new_operation(name = \"GetAccountAuthorizationDetails\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = list(\"UserDetailList\",  #>                 \"GroupDetailList\", \"RoleDetailList\", \"Policies\"))) #>     input <- .iam$get_account_authorization_details_input(Filter = Filter,  #>         MaxItems = MaxItems, Marker = Marker) #>     output <- .iam$get_account_authorization_details_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0206778> #> <environment: namespace:paws.security.identity> #>  #> $get_account_password_policy #> function ()  #> { #>     op <- new_operation(name = \"GetAccountPasswordPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_account_password_policy_input() #>     output <- .iam$get_account_password_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0207d90> #> <environment: namespace:paws.security.identity> #>  #> $get_account_summary #> function ()  #> { #>     op <- new_operation(name = \"GetAccountSummary\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_account_summary_input() #>     output <- .iam$get_account_summary_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02050e0> #> <environment: namespace:paws.security.identity> #>  #> $get_context_keys_for_custom_policy #> function (PolicyInputList)  #> { #>     op <- new_operation(name = \"GetContextKeysForCustomPolicy\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$get_context_keys_for_custom_policy_input(PolicyInputList = PolicyInputList) #>     output <- .iam$get_context_keys_for_custom_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02025b8> #> <environment: namespace:paws.security.identity> #>  #> $get_context_keys_for_principal_policy #> function (PolicySourceArn, PolicyInputList = NULL)  #> { #>     op <- new_operation(name = \"GetContextKeysForPrincipalPolicy\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$get_context_keys_for_principal_policy_input(PolicySourceArn = PolicySourceArn,  #>         PolicyInputList = PolicyInputList) #>     output <- .iam$get_context_keys_for_principal_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f02038f8> #> <environment: namespace:paws.security.identity> #>  #> $get_credential_report #> function ()  #> { #>     op <- new_operation(name = \"GetCredentialReport\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_credential_report_input() #>     output <- .iam$get_credential_report_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0200d98> #> <environment: namespace:paws.security.identity> #>  #> $get_group #> function (GroupName, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"GetGroup\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Users\")) #>     input <- .iam$get_group_input(GroupName = GroupName, Marker = Marker,  #>         MaxItems = MaxItems) #>     output <- .iam$get_group_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01fef58> #> <environment: namespace:paws.security.identity> #>  #> $get_group_policy #> function (GroupName, PolicyName)  #> { #>     op <- new_operation(name = \"GetGroupPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_group_policy_input(GroupName = GroupName,  #>         PolicyName = PolicyName) #>     output <- .iam$get_group_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01fa740> #> <environment: namespace:paws.security.identity> #>  #> $get_instance_profile #> function (InstanceProfileName)  #> { #>     op <- new_operation(name = \"GetInstanceProfile\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_instance_profile_input(InstanceProfileName = InstanceProfileName) #>     output <- .iam$get_instance_profile_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01fba48> #> <environment: namespace:paws.security.identity> #>  #> $get_login_profile #> function (UserName)  #> { #>     op <- new_operation(name = \"GetLoginProfile\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_login_profile_input(UserName = UserName) #>     output <- .iam$get_login_profile_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01f8e78> #> <environment: namespace:paws.security.identity> #>  #> $get_mfa_device #> function (SerialNumber, UserName = NULL)  #> { #>     op <- new_operation(name = \"GetMFADevice\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_mfa_device_input(SerialNumber = SerialNumber,  #>         UserName = UserName) #>     output <- .iam$get_mfa_device_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01f19d8> #> <environment: namespace:paws.security.identity> #>  #> $get_open_id_connect_provider #> function (OpenIDConnectProviderArn)  #> { #>     op <- new_operation(name = \"GetOpenIDConnectProvider\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_open_id_connect_provider_input(OpenIDConnectProviderArn = OpenIDConnectProviderArn) #>     output <- .iam$get_open_id_connect_provider_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01eeeb0> #> <environment: namespace:paws.security.identity> #>  #> $get_organizations_access_report #> function (JobId, MaxItems = NULL, Marker = NULL, SortKey = NULL)  #> { #>     op <- new_operation(name = \"GetOrganizationsAccessReport\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$get_organizations_access_report_input(JobId = JobId,  #>         MaxItems = MaxItems, Marker = Marker, SortKey = SortKey) #>     output <- .iam$get_organizations_access_report_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01f02d0> #> <environment: namespace:paws.security.identity> #>  #> $get_policy #> function (PolicyArn)  #> { #>     op <- new_operation(name = \"GetPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_policy_input(PolicyArn = PolicyArn) #>     output <- .iam$get_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01ee180> #> <environment: namespace:paws.security.identity> #>  #> $get_policy_version #> function (PolicyArn, VersionId)  #> { #>     op <- new_operation(name = \"GetPolicyVersion\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_policy_version_input(PolicyArn = PolicyArn,  #>         VersionId = VersionId) #>     output <- .iam$get_policy_version_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01e6688> #> <environment: namespace:paws.security.identity> #>  #> $get_role #> function (RoleName)  #> { #>     op <- new_operation(name = \"GetRole\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_role_input(RoleName = RoleName) #>     output <- .iam$get_role_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01db108> #> <environment: namespace:paws.security.identity> #>  #> $get_role_policy #> function (RoleName, PolicyName)  #> { #>     op <- new_operation(name = \"GetRolePolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_role_policy_input(RoleName = RoleName,  #>         PolicyName = PolicyName) #>     output <- .iam$get_role_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01d1568> #> <environment: namespace:paws.security.identity> #>  #> $get_saml_provider #> function (SAMLProviderArn)  #> { #>     op <- new_operation(name = \"GetSAMLProvider\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_saml_provider_input(SAMLProviderArn = SAMLProviderArn) #>     output <- .iam$get_saml_provider_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01ceae8> #> <environment: namespace:paws.security.identity> #>  #> $get_ssh_public_key #> function (UserName, SSHPublicKeyId, Encoding)  #> { #>     op <- new_operation(name = \"GetSSHPublicKey\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_ssh_public_key_input(UserName = UserName,  #>         SSHPublicKeyId = SSHPublicKeyId, Encoding = Encoding) #>     output <- .iam$get_ssh_public_key_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01cbf88> #> <environment: namespace:paws.security.identity> #>  #> $get_server_certificate #> function (ServerCertificateName)  #> { #>     op <- new_operation(name = \"GetServerCertificate\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_server_certificate_input(ServerCertificateName = ServerCertificateName) #>     output <- .iam$get_server_certificate_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01cd3a8> #> <environment: namespace:paws.security.identity> #>  #> $get_service_last_accessed_details #> function (JobId, MaxItems = NULL, Marker = NULL)  #> { #>     op <- new_operation(name = \"GetServiceLastAccessedDetails\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$get_service_last_accessed_details_input(JobId = JobId,  #>         MaxItems = MaxItems, Marker = Marker) #>     output <- .iam$get_service_last_accessed_details_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01ca848> #> <environment: namespace:paws.security.identity> #>  #> $get_service_last_accessed_details_with_entities #> function (JobId, ServiceNamespace, MaxItems = NULL, Marker = NULL)  #> { #>     op <- new_operation(name = \"GetServiceLastAccessedDetailsWithEntities\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$get_service_last_accessed_details_with_entities_input(JobId = JobId,  #>         ServiceNamespace = ServiceNamespace, MaxItems = MaxItems,  #>         Marker = Marker) #>     output <- .iam$get_service_last_accessed_details_with_entities_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01c7f18> #> <environment: namespace:paws.security.identity> #>  #> $get_service_linked_role_deletion_status #> function (DeletionTaskId)  #> { #>     op <- new_operation(name = \"GetServiceLinkedRoleDeletionStatus\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$get_service_linked_role_deletion_status_input(DeletionTaskId = DeletionTaskId) #>     output <- .iam$get_service_linked_role_deletion_status_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01c9418> #> <environment: namespace:paws.security.identity> #>  #> $get_user #> function (UserName = NULL)  #> { #>     op <- new_operation(name = \"GetUser\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_user_input(UserName = UserName) #>     output <- .iam$get_user_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01c6b20> #> <environment: namespace:paws.security.identity> #>  #> $get_user_policy #> function (UserName, PolicyName)  #> { #>     op <- new_operation(name = \"GetUserPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$get_user_policy_input(UserName = UserName,  #>         PolicyName = PolicyName) #>     output <- .iam$get_user_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01c3fc0> #> <environment: namespace:paws.security.identity> #>  #> $list_access_keys #> function (UserName = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListAccessKeys\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"AccessKeyMetadata\")) #>     input <- .iam$list_access_keys_input(UserName = UserName,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_access_keys_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01c5370> #> <environment: namespace:paws.security.identity> #>  #> $list_account_aliases #> function (Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListAccountAliases\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"AccountAliases\")) #>     input <- .iam$list_account_aliases_input(Marker = Marker,  #>         MaxItems = MaxItems) #>     output <- .iam$list_account_aliases_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01c2a40> #> <environment: namespace:paws.security.identity> #>  #> $list_attached_group_policies #> function (GroupName, PathPrefix = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListAttachedGroupPolicies\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"AttachedPolicies\")) #>     input <- .iam$list_attached_group_policies_input(GroupName = GroupName,  #>         PathPrefix = PathPrefix, Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_attached_group_policies_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01c0180> #> <environment: namespace:paws.security.identity> #>  #> $list_attached_role_policies #> function (RoleName, PathPrefix = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListAttachedRolePolicies\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"AttachedPolicies\")) #>     input <- .iam$list_attached_role_policies_input(RoleName = RoleName,  #>         PathPrefix = PathPrefix, Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_attached_role_policies_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01c17d0> #> <environment: namespace:paws.security.identity> #>  #> $list_attached_user_policies #> function (UserName, PathPrefix = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListAttachedUserPolicies\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"AttachedPolicies\")) #>     input <- .iam$list_attached_user_policies_input(UserName = UserName,  #>         PathPrefix = PathPrefix, Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_attached_user_policies_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01befb8> #> <environment: namespace:paws.security.identity> #>  #> $list_entities_for_policy #> function (PolicyArn, EntityFilter = NULL, PathPrefix = NULL,  #>     PolicyUsageFilter = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListEntitiesForPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = list(\"PolicyGroups\",  #>                 \"PolicyUsers\", \"PolicyRoles\"))) #>     input <- .iam$list_entities_for_policy_input(PolicyArn = PolicyArn,  #>         EntityFilter = EntityFilter, PathPrefix = PathPrefix,  #>         PolicyUsageFilter = PolicyUsageFilter, Marker = Marker,  #>         MaxItems = MaxItems) #>     output <- .iam$list_entities_for_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01bc928> #> <environment: namespace:paws.security.identity> #>  #> $list_group_policies #> function (GroupName, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListGroupPolicies\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"PolicyNames\")) #>     input <- .iam$list_group_policies_input(GroupName = GroupName,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_group_policies_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01b8420> #> <environment: namespace:paws.security.identity> #>  #> $list_groups #> function (PathPrefix = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListGroups\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Groups\")) #>     input <- .iam$list_groups_input(PathPrefix = PathPrefix,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_groups_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01b9990> #> <environment: namespace:paws.security.identity> #>  #> $list_groups_for_user #> function (UserName, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListGroupsForUser\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Groups\")) #>     input <- .iam$list_groups_for_user_input(UserName = UserName,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_groups_for_user_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01b7108> #> <environment: namespace:paws.security.identity> #>  #> $list_instance_profile_tags #> function (InstanceProfileName, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListInstanceProfileTags\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Tags\")) #>     input <- .iam$list_instance_profile_tags_input(InstanceProfileName = InstanceProfileName,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_instance_profile_tags_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01b48f0> #> <environment: namespace:paws.security.identity> #>  #> $list_instance_profiles #> function (PathPrefix = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListInstanceProfiles\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"InstanceProfiles\")) #>     input <- .iam$list_instance_profiles_input(PathPrefix = PathPrefix,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_instance_profiles_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01b5f78> #> <environment: namespace:paws.security.identity> #>  #> $list_instance_profiles_for_role #> function (RoleName, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListInstanceProfilesForRole\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"InstanceProfiles\")) #>     input <- .iam$list_instance_profiles_for_role_input(RoleName = RoleName,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_instance_profiles_for_role_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01b3a38> #> <environment: namespace:paws.security.identity> #>  #> $list_mfa_device_tags #> function (SerialNumber, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListMFADeviceTags\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Tags\")) #>     input <- .iam$list_mfa_device_tags_input(SerialNumber = SerialNumber,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_mfa_device_tags_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01adfb0> #> <environment: namespace:paws.security.identity> #>  #> $list_mfa_devices #> function (UserName = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListMFADevices\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"MFADevices\")) #>     input <- .iam$list_mfa_devices_input(UserName = UserName,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_mfa_devices_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01a8d88> #> <environment: namespace:paws.security.identity> #>  #> $list_open_id_connect_provider_tags #> function (OpenIDConnectProviderArn, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListOpenIDConnectProviderTags\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Tags\")) #>     input <- .iam$list_open_id_connect_provider_tags_input(OpenIDConnectProviderArn = OpenIDConnectProviderArn,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_open_id_connect_provider_tags_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01aa368> #> <environment: namespace:paws.security.identity> #>  #> $list_open_id_connect_providers #> function ()  #> { #>     op <- new_operation(name = \"ListOpenIDConnectProviders\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$list_open_id_connect_providers_input() #>     output <- .iam$list_open_id_connect_providers_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01a7a00> #> <environment: namespace:paws.security.identity> #>  #> $list_policies #> function (Scope = NULL, OnlyAttached = NULL, PathPrefix = NULL,  #>     PolicyUsageFilter = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListPolicies\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Policies\")) #>     input <- .iam$list_policies_input(Scope = Scope, OnlyAttached = OnlyAttached,  #>         PathPrefix = PathPrefix, PolicyUsageFilter = PolicyUsageFilter,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_policies_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01a3098> #> <environment: namespace:paws.security.identity> #>  #> $list_policies_granting_service_access #> function (Marker = NULL, Arn, ServiceNamespaces)  #> { #>     op <- new_operation(name = \"ListPoliciesGrantingServiceAccess\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$list_policies_granting_service_access_input(Marker = Marker,  #>         Arn = Arn, ServiceNamespaces = ServiceNamespaces) #>     output <- .iam$list_policies_granting_service_access_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01a0df8> #> <environment: namespace:paws.security.identity> #>  #> $list_policy_tags #> function (PolicyArn, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListPolicyTags\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Tags\")) #>     input <- .iam$list_policy_tags_input(PolicyArn = PolicyArn,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_policy_tags_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01a2640> #> <environment: namespace:paws.security.identity> #>  #> $list_policy_versions #> function (PolicyArn, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListPolicyVersions\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Versions\")) #>     input <- .iam$list_policy_versions_input(PolicyArn = PolicyArn,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_policy_versions_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f019ff40> #> <environment: namespace:paws.security.identity> #>  #> $list_role_policies #> function (RoleName, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListRolePolicies\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"PolicyNames\")) #>     input <- .iam$list_role_policies_input(RoleName = RoleName,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_role_policies_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f019d6f0> #> <environment: namespace:paws.security.identity> #>  #> $list_role_tags #> function (RoleName, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListRoleTags\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Tags\")) #>     input <- .iam$list_role_tags_input(RoleName = RoleName, Marker = Marker,  #>         MaxItems = MaxItems) #>     output <- .iam$list_role_tags_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f019ecd0> #> <environment: namespace:paws.security.identity> #>  #> $list_roles #> function (PathPrefix = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListRoles\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Roles\")) #>     input <- .iam$list_roles_input(PathPrefix = PathPrefix, Marker = Marker,  #>         MaxItems = MaxItems) #>     output <- .iam$list_roles_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f019c410> #> <environment: namespace:paws.security.identity> #>  #> $list_saml_provider_tags #> function (SAMLProviderArn, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListSAMLProviderTags\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Tags\")) #>     input <- .iam$list_saml_provider_tags_input(SAMLProviderArn = SAMLProviderArn,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_saml_provider_tags_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0198090> #> <environment: namespace:paws.security.identity> #>  #> $list_saml_providers #> function ()  #> { #>     op <- new_operation(name = \"ListSAMLProviders\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(result_key = \"SAMLProviderList\")) #>     input <- .iam$list_saml_providers_input() #>     output <- .iam$list_saml_providers_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0193728> #> <environment: namespace:paws.security.identity> #>  #> $list_ssh_public_keys #> function (UserName = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListSSHPublicKeys\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"SSHPublicKeys\")) #>     input <- .iam$list_ssh_public_keys_input(UserName = UserName,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_ssh_public_keys_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01949c0> #> <environment: namespace:paws.security.identity> #>  #> $list_server_certificate_tags #> function (ServerCertificateName, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListServerCertificateTags\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Tags\")) #>     input <- .iam$list_server_certificate_tags_input(ServerCertificateName = ServerCertificateName,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_server_certificate_tags_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01924b8> #> <environment: namespace:paws.security.identity> #>  #> $list_server_certificates #> function (PathPrefix = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListServerCertificates\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"ServerCertificateMetadataList\")) #>     input <- .iam$list_server_certificates_input(PathPrefix = PathPrefix,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_server_certificates_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f018fc68> #> <environment: namespace:paws.security.identity> #>  #> $list_service_specific_credentials #> function (UserName = NULL, ServiceName = NULL)  #> { #>     op <- new_operation(name = \"ListServiceSpecificCredentials\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$list_service_specific_credentials_input(UserName = UserName,  #>         ServiceName = ServiceName) #>     output <- .iam$list_service_specific_credentials_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01911d8> #> <environment: namespace:paws.security.identity> #>  #> $list_signing_certificates #> function (UserName = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListSigningCertificates\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Certificates\")) #>     input <- .iam$list_signing_certificates_input(UserName = UserName,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_signing_certificates_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f018f2f0> #> <environment: namespace:paws.security.identity> #>  #> $list_user_policies #> function (UserName, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListUserPolicies\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"PolicyNames\")) #>     input <- .iam$list_user_policies_input(UserName = UserName,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_user_policies_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f018cb10> #> <environment: namespace:paws.security.identity> #>  #> $list_user_tags #> function (UserName, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListUserTags\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Tags\")) #>     input <- .iam$list_user_tags_input(UserName = UserName, Marker = Marker,  #>         MaxItems = MaxItems) #>     output <- .iam$list_user_tags_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f018a288> #> <environment: namespace:paws.security.identity> #>  #> $list_users #> function (PathPrefix = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListUsers\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"Users\")) #>     input <- .iam$list_users_input(PathPrefix = PathPrefix, Marker = Marker,  #>         MaxItems = MaxItems) #>     output <- .iam$list_users_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0187990> #> <environment: namespace:paws.security.identity> #>  #> $list_virtual_mfa_devices #> function (AssignmentStatus = NULL, Marker = NULL, MaxItems = NULL)  #> { #>     op <- new_operation(name = \"ListVirtualMFADevices\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"VirtualMFADevices\")) #>     input <- .iam$list_virtual_mfa_devices_input(AssignmentStatus = AssignmentStatus,  #>         Marker = Marker, MaxItems = MaxItems) #>     output <- .iam$list_virtual_mfa_devices_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0188f70> #> <environment: namespace:paws.security.identity> #>  #> $put_group_policy #> function (GroupName, PolicyName, PolicyDocument)  #> { #>     op <- new_operation(name = \"PutGroupPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$put_group_policy_input(GroupName = GroupName,  #>         PolicyName = PolicyName, PolicyDocument = PolicyDocument) #>     output <- .iam$put_group_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01866b0> #> <environment: namespace:paws.security.identity> #>  #> $put_role_permissions_boundary #> function (RoleName, PermissionsBoundary)  #> { #>     op <- new_operation(name = \"PutRolePermissionsBoundary\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$put_role_permissions_boundary_input(RoleName = RoleName,  #>         PermissionsBoundary = PermissionsBoundary) #>     output <- .iam$put_role_permissions_boundary_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0181ed0> #> <environment: namespace:paws.security.identity> #>  #> $put_role_policy #> function (RoleName, PolicyName, PolicyDocument)  #> { #>     op <- new_operation(name = \"PutRolePolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$put_role_policy_input(RoleName = RoleName,  #>         PolicyName = PolicyName, PolicyDocument = PolicyDocument) #>     output <- .iam$put_role_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f017fdf0> #> <environment: namespace:paws.security.identity> #>  #> $put_user_permissions_boundary #> function (UserName, PermissionsBoundary)  #> { #>     op <- new_operation(name = \"PutUserPermissionsBoundary\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$put_user_permissions_boundary_input(UserName = UserName,  #>         PermissionsBoundary = PermissionsBoundary) #>     output <- .iam$put_user_permissions_boundary_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f017cbf0> #> <environment: namespace:paws.security.identity> #>  #> $put_user_policy #> function (UserName, PolicyName, PolicyDocument)  #> { #>     op <- new_operation(name = \"PutUserPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$put_user_policy_input(UserName = UserName,  #>         PolicyName = PolicyName, PolicyDocument = PolicyDocument) #>     output <- .iam$put_user_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0178950> #> <environment: namespace:paws.security.identity> #>  #> $remove_client_id_from_open_id_connect_provider #> function (OpenIDConnectProviderArn, ClientID)  #> { #>     op <- new_operation(name = \"RemoveClientIDFromOpenIDConnectProvider\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$remove_client_id_from_open_id_connect_provider_input(OpenIDConnectProviderArn = OpenIDConnectProviderArn,  #>         ClientID = ClientID) #>     output <- .iam$remove_client_id_from_open_id_connect_provider_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0179ec0> #> <environment: namespace:paws.security.identity> #>  #> $remove_role_from_instance_profile #> function (InstanceProfileName, RoleName)  #> { #>     op <- new_operation(name = \"RemoveRoleFromInstanceProfile\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$remove_role_from_instance_profile_input(InstanceProfileName = InstanceProfileName,  #>         RoleName = RoleName) #>     output <- .iam$remove_role_from_instance_profile_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0172f38> #> <environment: namespace:paws.security.identity> #>  #> $remove_user_from_group #> function (GroupName, UserName)  #> { #>     op <- new_operation(name = \"RemoveUserFromGroup\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$remove_user_from_group_input(GroupName = GroupName,  #>         UserName = UserName) #>     output <- .iam$remove_user_from_group_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f016a688> #> <environment: namespace:paws.security.identity> #>  #> $reset_service_specific_credential #> function (UserName = NULL, ServiceSpecificCredentialId)  #> { #>     op <- new_operation(name = \"ResetServiceSpecificCredential\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$reset_service_specific_credential_input(UserName = UserName,  #>         ServiceSpecificCredentialId = ServiceSpecificCredentialId) #>     output <- .iam$reset_service_specific_credential_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0168a78> #> <environment: namespace:paws.security.identity> #>  #> $resync_mfa_device #> function (UserName, SerialNumber, AuthenticationCode1, AuthenticationCode2)  #> { #>     op <- new_operation(name = \"ResyncMFADevice\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$resync_mfa_device_input(UserName = UserName,  #>         SerialNumber = SerialNumber, AuthenticationCode1 = AuthenticationCode1,  #>         AuthenticationCode2 = AuthenticationCode2) #>     output <- .iam$resync_mfa_device_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f016a090> #> <environment: namespace:paws.security.identity> #>  #> $set_default_policy_version #> function (PolicyArn, VersionId)  #> { #>     op <- new_operation(name = \"SetDefaultPolicyVersion\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$set_default_policy_version_input(PolicyArn = PolicyArn,  #>         VersionId = VersionId) #>     output <- .iam$set_default_policy_version_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0168100> #> <environment: namespace:paws.security.identity> #>  #> $set_security_token_service_preferences #> function (GlobalEndpointTokenVersion)  #> { #>     op <- new_operation(name = \"SetSecurityTokenServicePreferences\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$set_security_token_service_preferences_input(GlobalEndpointTokenVersion = GlobalEndpointTokenVersion) #>     output <- .iam$set_security_token_service_preferences_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0164090> #> <environment: namespace:paws.security.identity> #>  #> $simulate_custom_policy #> function (PolicyInputList, PermissionsBoundaryPolicyInputList = NULL,  #>     ActionNames, ResourceArns = NULL, ResourcePolicy = NULL,  #>     ResourceOwner = NULL, CallerArn = NULL, ContextEntries = NULL,  #>     ResourceHandlingOption = NULL, MaxItems = NULL, Marker = NULL)  #> { #>     op <- new_operation(name = \"SimulateCustomPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"EvaluationResults\")) #>     input <- .iam$simulate_custom_policy_input(PolicyInputList = PolicyInputList,  #>         PermissionsBoundaryPolicyInputList = PermissionsBoundaryPolicyInputList,  #>         ActionNames = ActionNames, ResourceArns = ResourceArns,  #>         ResourcePolicy = ResourcePolicy, ResourceOwner = ResourceOwner,  #>         CallerArn = CallerArn, ContextEntries = ContextEntries,  #>         ResourceHandlingOption = ResourceHandlingOption, MaxItems = MaxItems,  #>         Marker = Marker) #>     output <- .iam$simulate_custom_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f015f488> #> <environment: namespace:paws.security.identity> #>  #> $simulate_principal_policy #> function (PolicySourceArn, PolicyInputList = NULL, PermissionsBoundaryPolicyInputList = NULL,  #>     ActionNames, ResourceArns = NULL, ResourcePolicy = NULL,  #>     ResourceOwner = NULL, CallerArn = NULL, ContextEntries = NULL,  #>     ResourceHandlingOption = NULL, MaxItems = NULL, Marker = NULL)  #> { #>     op <- new_operation(name = \"SimulatePrincipalPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list(input_token = \"Marker\",  #>             limit_key = \"MaxItems\", more_results = \"IsTruncated\",  #>             output_token = \"Marker\", result_key = \"EvaluationResults\")) #>     input <- .iam$simulate_principal_policy_input(PolicySourceArn = PolicySourceArn,  #>         PolicyInputList = PolicyInputList, PermissionsBoundaryPolicyInputList = PermissionsBoundaryPolicyInputList,  #>         ActionNames = ActionNames, ResourceArns = ResourceArns,  #>         ResourcePolicy = ResourcePolicy, ResourceOwner = ResourceOwner,  #>         CallerArn = CallerArn, ContextEntries = ContextEntries,  #>         ResourceHandlingOption = ResourceHandlingOption, MaxItems = MaxItems,  #>         Marker = Marker) #>     output <- .iam$simulate_principal_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f015b3a8> #> <environment: namespace:paws.security.identity> #>  #> $tag_instance_profile #> function (InstanceProfileName, Tags)  #> { #>     op <- new_operation(name = \"TagInstanceProfile\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$tag_instance_profile_input(InstanceProfileName = InstanceProfileName,  #>         Tags = Tags) #>     output <- .iam$tag_instance_profile_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01590d0> #> <environment: namespace:paws.security.identity> #>  #> $tag_mfa_device #> function (SerialNumber, Tags)  #> { #>     op <- new_operation(name = \"TagMFADevice\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$tag_mfa_device_input(SerialNumber = SerialNumber,  #>         Tags = Tags) #>     output <- .iam$tag_mfa_device_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f015a410> #> <environment: namespace:paws.security.identity> #>  #> $tag_open_id_connect_provider #> function (OpenIDConnectProviderArn, Tags)  #> { #>     op <- new_operation(name = \"TagOpenIDConnectProvider\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$tag_open_id_connect_provider_input(OpenIDConnectProviderArn = OpenIDConnectProviderArn,  #>         Tags = Tags) #>     output <- .iam$tag_open_id_connect_provider_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0157920> #> <environment: namespace:paws.security.identity> #>  #> $tag_policy #> function (PolicyArn, Tags)  #> { #>     op <- new_operation(name = \"TagPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$tag_policy_input(PolicyArn = PolicyArn, Tags = Tags) #>     output <- .iam$tag_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0158c60> #> <environment: namespace:paws.security.identity> #>  #> $tag_role #> function (RoleName, Tags)  #> { #>     op <- new_operation(name = \"TagRole\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$tag_role_input(RoleName = RoleName, Tags = Tags) #>     output <- .iam$tag_role_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01564f0> #> <environment: namespace:paws.security.identity> #>  #> $tag_saml_provider #> function (SAMLProviderArn, Tags)  #> { #>     op <- new_operation(name = \"TagSAMLProvider\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$tag_saml_provider_input(SAMLProviderArn = SAMLProviderArn,  #>         Tags = Tags) #>     output <- .iam$tag_saml_provider_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0153b50> #> <environment: namespace:paws.security.identity> #>  #> $tag_server_certificate #> function (ServerCertificateName, Tags)  #> { #>     op <- new_operation(name = \"TagServerCertificate\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$tag_server_certificate_input(ServerCertificateName = ServerCertificateName,  #>         Tags = Tags) #>     output <- .iam$tag_server_certificate_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0151418> #> <environment: namespace:paws.security.identity> #>  #> $tag_user #> function (UserName, Tags)  #> { #>     op <- new_operation(name = \"TagUser\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$tag_user_input(UserName = UserName, Tags = Tags) #>     output <- .iam$tag_user_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0152a30> #> <environment: namespace:paws.security.identity> #>  #> $untag_instance_profile #> function (InstanceProfileName, TagKeys)  #> { #>     op <- new_operation(name = \"UntagInstanceProfile\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$untag_instance_profile_input(InstanceProfileName = InstanceProfileName,  #>         TagKeys = TagKeys) #>     output <- .iam$untag_instance_profile_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f014ffb0> #> <environment: namespace:paws.security.identity> #>  #> $untag_mfa_device #> function (SerialNumber, TagKeys)  #> { #>     op <- new_operation(name = \"UntagMFADevice\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$untag_mfa_device_input(SerialNumber = SerialNumber,  #>         TagKeys = TagKeys) #>     output <- .iam$untag_mfa_device_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f014d4f8> #> <environment: namespace:paws.security.identity> #>  #> $untag_open_id_connect_provider #> function (OpenIDConnectProviderArn, TagKeys)  #> { #>     op <- new_operation(name = \"UntagOpenIDConnectProvider\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$untag_open_id_connect_provider_input(OpenIDConnectProviderArn = OpenIDConnectProviderArn,  #>         TagKeys = TagKeys) #>     output <- .iam$untag_open_id_connect_provider_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f014e838> #> <environment: namespace:paws.security.identity> #>  #> $untag_policy #> function (PolicyArn, TagKeys)  #> { #>     op <- new_operation(name = \"UntagPolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$untag_policy_input(PolicyArn = PolicyArn, TagKeys = TagKeys) #>     output <- .iam$untag_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f014bd48> #> <environment: namespace:paws.security.identity> #>  #> $untag_role #> function (RoleName, TagKeys)  #> { #>     op <- new_operation(name = \"UntagRole\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$untag_role_input(RoleName = RoleName, TagKeys = TagKeys) #>     output <- .iam$untag_role_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f014d0c0> #> <environment: namespace:paws.security.identity> #>  #> $untag_saml_provider #> function (SAMLProviderArn, TagKeys)  #> { #>     op <- new_operation(name = \"UntagSAMLProvider\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$untag_saml_provider_input(SAMLProviderArn = SAMLProviderArn,  #>         TagKeys = TagKeys) #>     output <- .iam$untag_saml_provider_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f014a5d0> #> <environment: namespace:paws.security.identity> #>  #> $untag_server_certificate #> function (ServerCertificateName, TagKeys)  #> { #>     op <- new_operation(name = \"UntagServerCertificate\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$untag_server_certificate_input(ServerCertificateName = ServerCertificateName,  #>         TagKeys = TagKeys) #>     output <- .iam$untag_server_certificate_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0145c68> #> <environment: namespace:paws.security.identity> #>  #> $untag_user #> function (UserName, TagKeys)  #> { #>     op <- new_operation(name = \"UntagUser\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$untag_user_input(UserName = UserName, TagKeys = TagKeys) #>     output <- .iam$untag_user_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0147018> #> <environment: namespace:paws.security.identity> #>  #> $update_access_key #> function (UserName = NULL, AccessKeyId, Status)  #> { #>     op <- new_operation(name = \"UpdateAccessKey\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$update_access_key_input(UserName = UserName,  #>         AccessKeyId = AccessKeyId, Status = Status) #>     output <- .iam$update_access_key_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0144560> #> <environment: namespace:paws.security.identity> #>  #> $update_account_password_policy #> function (MinimumPasswordLength = NULL, RequireSymbols = NULL,  #>     RequireNumbers = NULL, RequireUppercaseCharacters = NULL,  #>     RequireLowercaseCharacters = NULL, AllowUsersToChangePassword = NULL,  #>     MaxPasswordAge = NULL, PasswordReusePrevention = NULL, HardExpiry = NULL)  #> { #>     op <- new_operation(name = \"UpdateAccountPasswordPolicy\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$update_account_password_policy_input(MinimumPasswordLength = MinimumPasswordLength,  #>         RequireSymbols = RequireSymbols, RequireNumbers = RequireNumbers,  #>         RequireUppercaseCharacters = RequireUppercaseCharacters,  #>         RequireLowercaseCharacters = RequireLowercaseCharacters,  #>         AllowUsersToChangePassword = AllowUsersToChangePassword,  #>         MaxPasswordAge = MaxPasswordAge, PasswordReusePrevention = PasswordReusePrevention,  #>         HardExpiry = HardExpiry) #>     output <- .iam$update_account_password_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0142138> #> <environment: namespace:paws.security.identity> #>  #> $update_assume_role_policy #> function (RoleName, PolicyDocument)  #> { #>     op <- new_operation(name = \"UpdateAssumeRolePolicy\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$update_assume_role_policy_input(RoleName = RoleName,  #>         PolicyDocument = PolicyDocument) #>     output <- .iam$update_assume_role_policy_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f013fae0> #> <environment: namespace:paws.security.identity> #>  #> $update_group #> function (GroupName, NewPath = NULL, NewGroupName = NULL)  #> { #>     op <- new_operation(name = \"UpdateGroup\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$update_group_input(GroupName = GroupName, NewPath = NewPath,  #>         NewGroupName = NewGroupName) #>     output <- .iam$update_group_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0140f38> #> <environment: namespace:paws.security.identity> #>  #> $update_login_profile #> function (UserName, Password = NULL, PasswordResetRequired = NULL)  #> { #>     op <- new_operation(name = \"UpdateLoginProfile\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$update_login_profile_input(UserName = UserName,  #>         Password = Password, PasswordResetRequired = PasswordResetRequired) #>     output <- .iam$update_login_profile_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f013e528> #> <environment: namespace:paws.security.identity> #>  #> $update_open_id_connect_provider_thumbprint #> function (OpenIDConnectProviderArn, ThumbprintList)  #> { #>     op <- new_operation(name = \"UpdateOpenIDConnectProviderThumbprint\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$update_open_id_connect_provider_thumbprint_input(OpenIDConnectProviderArn = OpenIDConnectProviderArn,  #>         ThumbprintList = ThumbprintList) #>     output <- .iam$update_open_id_connect_provider_thumbprint_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0137cd8> #> <environment: namespace:paws.security.identity> #>  #> $update_role #> function (RoleName, Description = NULL, MaxSessionDuration = NULL)  #> { #>     op <- new_operation(name = \"UpdateRole\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$update_role_input(RoleName = RoleName, Description = Description,  #>         MaxSessionDuration = MaxSessionDuration) #>     output <- .iam$update_role_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0139050> #> <environment: namespace:paws.security.identity> #>  #> $update_role_description #> function (RoleName, Description)  #> { #>     op <- new_operation(name = \"UpdateRoleDescription\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$update_role_description_input(RoleName = RoleName,  #>         Description = Description) #>     output <- .iam$update_role_description_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0134758> #> <environment: namespace:paws.security.identity> #>  #> $update_saml_provider #> function (SAMLMetadataDocument, SAMLProviderArn)  #> { #>     op <- new_operation(name = \"UpdateSAMLProvider\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$update_saml_provider_input(SAMLMetadataDocument = SAMLMetadataDocument,  #>         SAMLProviderArn = SAMLProviderArn) #>     output <- .iam$update_saml_provider_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0135ad0> #> <environment: namespace:paws.security.identity> #>  #> $update_ssh_public_key #> function (UserName, SSHPublicKeyId, Status)  #> { #>     op <- new_operation(name = \"UpdateSSHPublicKey\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$update_ssh_public_key_input(UserName = UserName,  #>         SSHPublicKeyId = SSHPublicKeyId, Status = Status) #>     output <- .iam$update_ssh_public_key_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0133018> #> <environment: namespace:paws.security.identity> #>  #> $update_server_certificate #> function (ServerCertificateName, NewPath = NULL, NewServerCertificateName = NULL)  #> { #>     op <- new_operation(name = \"UpdateServerCertificate\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$update_server_certificate_input(ServerCertificateName = ServerCertificateName,  #>         NewPath = NewPath, NewServerCertificateName = NewServerCertificateName) #>     output <- .iam$update_server_certificate_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f012e758> #> <environment: namespace:paws.security.identity> #>  #> $update_service_specific_credential #> function (UserName = NULL, ServiceSpecificCredentialId, Status)  #> { #>     op <- new_operation(name = \"UpdateServiceSpecificCredential\",  #>         http_method = \"POST\", http_path = \"/\", paginator = list()) #>     input <- .iam$update_service_specific_credential_input(UserName = UserName,  #>         ServiceSpecificCredentialId = ServiceSpecificCredentialId,  #>         Status = Status) #>     output <- .iam$update_service_specific_credential_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f012fb78> #> <environment: namespace:paws.security.identity> #>  #> $update_signing_certificate #> function (UserName = NULL, CertificateId, Status)  #> { #>     op <- new_operation(name = \"UpdateSigningCertificate\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$update_signing_certificate_input(UserName = UserName,  #>         CertificateId = CertificateId, Status = Status) #>     output <- .iam$update_signing_certificate_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f012d168> #> <environment: namespace:paws.security.identity> #>  #> $update_user #> function (UserName, NewPath = NULL, NewUserName = NULL)  #> { #>     op <- new_operation(name = \"UpdateUser\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$update_user_input(UserName = UserName, NewPath = NewPath,  #>         NewUserName = NewUserName) #>     output <- .iam$update_user_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f012a800> #> <environment: namespace:paws.security.identity> #>  #> $upload_ssh_public_key #> function (UserName, SSHPublicKeyBody)  #> { #>     op <- new_operation(name = \"UploadSSHPublicKey\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$upload_ssh_public_key_input(UserName = UserName,  #>         SSHPublicKeyBody = SSHPublicKeyBody) #>     output <- .iam$upload_ssh_public_key_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f012bc58> #> <environment: namespace:paws.security.identity> #>  #> $upload_server_certificate #> function (Path = NULL, ServerCertificateName, CertificateBody,  #>     PrivateKey, CertificateChain = NULL, Tags = NULL)  #> { #>     op <- new_operation(name = \"UploadServerCertificate\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$upload_server_certificate_input(Path = Path,  #>         ServerCertificateName = ServerCertificateName, CertificateBody = CertificateBody,  #>         PrivateKey = PrivateKey, CertificateChain = CertificateChain,  #>         Tags = Tags) #>     output <- .iam$upload_server_certificate_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f0127450> #> <environment: namespace:paws.security.identity> #>  #> $upload_signing_certificate #> function (UserName = NULL, CertificateBody)  #> { #>     op <- new_operation(name = \"UploadSigningCertificate\", http_method = \"POST\",  #>         http_path = \"/\", paginator = list()) #>     input <- .iam$upload_signing_certificate_input(UserName = UserName,  #>         CertificateBody = CertificateBody) #>     output <- .iam$upload_signing_certificate_output() #>     config <- get_config() #>     svc <- .iam$service(config) #>     request <- new_request(svc, op, input, output) #>     response <- send_request(request) #>     return(response) #> } #> <bytecode: 0x5618f01173f0> #> <environment: namespace:paws.security.identity> #>  #> $.internal #> $.internal$config #> $credentials #> <environment: 0x5618ef6821d8> #>  #> $endpoint #> [1] \"\" #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $endpoint_resolver #> [1] \"\" #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $enforce_should_retry_check #> [1] FALSE #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $region #> [1] \"\" #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $disable_ssl #> [1] FALSE #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $close_connection #> [1] FALSE #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $max_retries #> [1] 3 #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $connect_timeout #> [1] 60 #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $retryer #> logical(0) #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $disable_param_validation #> [1] FALSE #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $disable_compute_checksums #> [1] FALSE #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $s3_force_path_style #> [1] FALSE #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $s3_disable_100_continue #> [1] FALSE #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $s3_use_accelerate #> [1] FALSE #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $s3_disable_content_md5_validation #> [1] FALSE #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $ec2_metadata_disable_timeout_override #> [1] FALSE #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $use_dual_stack #> [1] FALSE #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $sleep_delay #> logical(0) #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $disable_rest_protocol_uri_cleaning #> [1] FALSE #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $sts_regional_endpoint #> [1] \"\" #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> $signature_version #> [1] \"\" #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"scalar\" #>  #>  #> attr(,\"tags\") #> attr(,\"tags\")$type #> [1] \"structure\" #>  #> attr(,\"class\") #> [1] \"struct\" #>  #>"},{"path":"/reference/aws_policies.html","id":null,"dir":"Reference","previous_headings":"","what":"List policies — aws_policies","title":"List policies — aws_policies","text":"List policies","code":""},{"path":"/reference/aws_policies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List policies — aws_policies","text":"","code":"aws_policies(refresh = FALSE, ...)"},{"path":"/reference/aws_policies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List policies — aws_policies","text":"refresh (logical) refresh results? default: FALSE. invalidate cache refresh policy data, set refresh=TRUE ... parameters passed list_policies","code":""},{"path":"/reference/aws_policies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List policies — aws_policies","text":"tibble information policies","code":""},{"path":"/reference/aws_policies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List policies — aws_policies","text":"uses memoise internally cache results speed subsequent calls function","code":""},{"path":"/reference/aws_policies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List policies — aws_policies","text":"","code":"if (FALSE) { aws_policies() aws_policies() aws_policies(refresh = TRUE) }"},{"path":"/reference/aws_policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a policy — aws_policy","title":"Get a policy — aws_policy","text":"Get policy","code":""},{"path":"/reference/aws_policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a policy — aws_policy","text":"","code":"aws_policy(name)"},{"path":"/reference/aws_policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a policy — aws_policy","text":"name (character) policy name ARN","code":""},{"path":"/reference/aws_policy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a policy — aws_policy","text":"tibble policy details","code":""},{"path":"/reference/aws_policy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a policy — aws_policy","text":"see docs https://www.paws-r-sdk.com/docs/iam_get_policy/","code":""},{"path":"/reference/aws_policy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a policy — aws_policy","text":"","code":"if (FALSE) { aws_policy(\"ReadOnlyAccess\") aws_policy(\"arn:aws:iam::aws:policy/ReadOnlyAccess\") }"},{"path":"/reference/aws_policy_attach.html","id":null,"dir":"Reference","previous_headings":"","what":"Attach a policy to a user, group, or role — aws_policy_attach","title":"Attach a policy to a user, group, or role — aws_policy_attach","text":"Attach policy user, group, role","code":""},{"path":"/reference/aws_policy_attach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attach a policy to a user, group, or role — aws_policy_attach","text":"","code":"aws_policy_attach(.x, policy)"},{"path":"/reference/aws_policy_attach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attach a policy to a user, group, or role — aws_policy_attach","text":".x result call create get method user, group, role policy (character) policy name ARN","code":""},{"path":"/reference/aws_policy_attach.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attach a policy to a user, group, or role — aws_policy_attach","text":"tibble information policies","code":""},{"path":"/reference/aws_policy_attach.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attach a policy to a user, group, or role — aws_policy_attach","text":"","code":"if (FALSE) { aws_policy(\"AmazonRDSDataFullAccess\") aws_user() %>% aws_policy_attach(\"AmazonRDSDataFullAccess\") aws_user()$attached_policies  # aws_role(\"OrganizationAccountSecurityRole\") %>% #  aws_policy_attach(\"ReadOnlyAccess\") }"},{"path":"/reference/aws_policy_detach.html","id":null,"dir":"Reference","previous_headings":"","what":"Detach a policy from a user, group, or role — aws_policy_detach","title":"Detach a policy from a user, group, or role — aws_policy_detach","text":"Detach policy user, group, role","code":""},{"path":"/reference/aws_policy_detach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detach a policy from a user, group, or role — aws_policy_detach","text":"","code":"aws_policy_detach(.x, policy)"},{"path":"/reference/aws_policy_detach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detach a policy from a user, group, or role — aws_policy_detach","text":".x result call create get method user, group, role policy (character) policy name ARN","code":""},{"path":"/reference/aws_policy_detach.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detach a policy from a user, group, or role — aws_policy_detach","text":"tibble information policies","code":""},{"path":"/reference/aws_policy_detach.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detach a policy from a user, group, or role — aws_policy_detach","text":"","code":"if (FALSE) { aws_user() %>%   aws_policy_detach(\"AmazonRDSDataFullAccess\") aws_user()$attached_policies  # aws_role(\"OrganizationAccountSecurityRole\") %>% #  aws_policy_detach(\"ReadOnlyAccess\") }"},{"path":"/reference/aws_policy_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a policy — aws_policy_exists","title":"Get a policy — aws_policy_exists","text":"Get policy","code":""},{"path":"/reference/aws_policy_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a policy — aws_policy_exists","text":"","code":"aws_policy_exists(name)"},{"path":"/reference/aws_policy_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a policy — aws_policy_exists","text":"name (character) policy name","code":""},{"path":"/reference/aws_policy_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a policy — aws_policy_exists","text":"tibble policy details","code":""},{"path":"/reference/aws_policy_exists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a policy — aws_policy_exists","text":"see docs https://www.paws-r-sdk.com/docs/iam_get_policy/","code":""},{"path":"/reference/aws_policy_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a policy — aws_policy_exists","text":"","code":"if (FALSE) { aws_policy_exists(\"ReadOnlyAccess\") }"},{"path":"/reference/aws_role.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a role — aws_role","title":"Get a role — aws_role","text":"Get role","code":""},{"path":"/reference/aws_role.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a role — aws_role","text":"","code":"aws_role(name)"},{"path":"/reference/aws_role.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a role — aws_role","text":"name (character) role name","code":""},{"path":"/reference/aws_role.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a role — aws_role","text":"named list slots : role (tibble) policies (character) attached_policies (tibble)","code":""},{"path":"/reference/aws_role.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a role — aws_role","text":"see docs https://www.paws-r-sdk.com/docs/iam_get_role/; also includes policies attached policies calling list_role_policies list_attached_role_policies","code":""},{"path":"/reference/aws_role.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a role — aws_role","text":"","code":"if (FALSE) { res <- aws_role(name = \"OrganizationAccountSecurityRole\") res res$role res$policies res$attached_policies  aws_role(\"AWSServiceRoleForCloudTrail\") aws_role(\"AWSServiceRoleForRedshift\") }"},{"path":"/reference/aws_role_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a role — aws_role_create","title":"Create a role — aws_role_create","text":"Create role","code":""},{"path":"/reference/aws_role_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a role — aws_role_create","text":"","code":"aws_role_create(   name,   assume_role_policy_document,   path = NULL,   description = NULL,   max_session_duration = NULL,   permission_boundary = NULL,   tags = NULL )"},{"path":"/reference/aws_role_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a role — aws_role_create","text":"name (character) role name. required assume_role_policy_document (character) trust relationship policy document grants entity permission assume role. json string. required path (character) path role name. optional. included, defaults slash (/). description (character) description fo role. optional max_session_duration (character) maximum session duration (seconds) want set specified role. optional permission_boundary (character) ARN managed policy used set permissions boundary role. optional tags (list) list tags want attach new user. optional","code":""},{"path":"/reference/aws_role_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a role — aws_role_create","text":"tibble information role created","code":""},{"path":"/reference/aws_role_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a role — aws_role_create","text":"See https://www.paws-r-sdk.com/docs/iam_create_role/ docs details parameters","code":""},{"path":"/reference/aws_role_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a role — aws_role_create","text":"","code":"if (FALSE) { role_name <- \"MyRole\" trust_policy <- list(   Version = \"2012-10-17\",   Statement = list(     list(       Effect = \"Allow\",       Principal = list(         Service = \"lambda.amazonaws.com\"       ),       Action = \"sts:AssumeRole\"     )   ) ) doc <- jsonlite::toJSON(trust_policy, auto_unbox = TRUE) desc <- \"My test role\" z <- aws_role_create(role_name, assume_role_policy_document = doc,    description = desc) z # attach a policy z %>% aws_policy_attach(\"AWSLambdaBasicExecutionRole\") }"},{"path":"/reference/aws_role_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a role — aws_role_delete","title":"Delete a role — aws_role_delete","text":"Delete role","code":""},{"path":"/reference/aws_role_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a role — aws_role_delete","text":"","code":"aws_role_delete(name)"},{"path":"/reference/aws_role_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a role — aws_role_delete","text":"name (character) role name. required","code":""},{"path":"/reference/aws_role_delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a role — aws_role_delete","text":"empty list","code":""},{"path":"/reference/aws_role_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete a role — aws_role_delete","text":"See https://www.paws-r-sdk.com/docs/iam_delete_role/ docs details","code":""},{"path":"/reference/aws_role_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a role — aws_role_delete","text":"","code":"if (FALSE) { aws_role_delete(name = \"MyRole\") }"},{"path":"/reference/aws_roles.html","id":null,"dir":"Reference","previous_headings":"","what":"List roles — aws_roles","title":"List roles — aws_roles","text":"List roles","code":""},{"path":"/reference/aws_roles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List roles — aws_roles","text":"","code":"aws_roles(...)"},{"path":"/reference/aws_roles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List roles — aws_roles","text":"... parameters passed paws list_users method","code":""},{"path":"/reference/aws_roles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List roles — aws_roles","text":"tibble information roles","code":""},{"path":"/reference/aws_roles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List roles — aws_roles","text":"","code":"if (FALSE) { aws_roles() }"},{"path":"/reference/aws_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a user — aws_user","title":"Get a user — aws_user","text":"Gets user information, including policies, groups, attached policies","code":""},{"path":"/reference/aws_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a user — aws_user","text":"","code":"aws_user(username = NULL)"},{"path":"/reference/aws_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a user — aws_user","text":"username (character) user name. required","code":""},{"path":"/reference/aws_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a user — aws_user","text":"named list slots : user (tibble) policies (list) attached_policies (list) groups (list)","code":""},{"path":"/reference/aws_user.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a user — aws_user","text":"See following docs links details https://www.paws-r-sdk.com/docs/iam_get_user/ https://www.paws-r-sdk.com/docs/iam_list_user_policies/ https://www.paws-r-sdk.com/docs/iam_list_groups_for_user/ https://www.paws-r-sdk.com/docs/iam_list_attached_user_policies/","code":""},{"path":"/reference/aws_user.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a user — aws_user","text":"username supplied, gets logged user","code":""},{"path":"/reference/aws_user.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a user — aws_user","text":"","code":"if (FALSE) { # if username not supplied, gets logged in user aws_user()  # supply a username to get that user's information aws_user_create(\"testBlueBird\") aws_user(username = \"testBlueBird\") aws_user_delete(\"testBlueBird\") # cleanup user }"},{"path":"/reference/aws_user_access_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the current user's AWS Access Key — aws_user_access_key","title":"Get the current user's AWS Access Key — aws_user_access_key","text":"IMPORTANT: secret access key accessible key user creation","code":""},{"path":"/reference/aws_user_access_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the current user's AWS Access Key — aws_user_access_key","text":"","code":"aws_user_access_key()"},{"path":"/reference/aws_user_access_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the current user's AWS Access Key — aws_user_access_key","text":"tibble key details","code":""},{"path":"/reference/aws_user_access_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the current user's AWS Access Key — aws_user_access_key","text":"See https://www.paws-r-sdk.com/docs/iam_list_access_keys/ docs details","code":""},{"path":"/reference/aws_user_access_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the current user's AWS Access Key — aws_user_access_key","text":"","code":"if (FALSE) { # aws_user_access_key() }"},{"path":"/reference/aws_user_add_to_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a user to a group — aws_user_add_to_group","title":"Add a user to a group — aws_user_add_to_group","text":"Add user group","code":""},{"path":"/reference/aws_user_add_to_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a user to a group — aws_user_add_to_group","text":"","code":"aws_user_add_to_group(username, groupname)"},{"path":"/reference/aws_user_add_to_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a user to a group — aws_user_add_to_group","text":"username (character) user name. required groupname (character) group name. required","code":""},{"path":"/reference/aws_user_add_to_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a user to a group — aws_user_add_to_group","text":"named list slots : user (tibble) policies (list) attached_policies (list) groups (list)","code":""},{"path":"/reference/aws_user_add_to_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a user to a group — aws_user_add_to_group","text":"See https://www.paws-r-sdk.com/docs/iam_add_user_to_group/ docs details","code":""},{"path":"/reference/aws_user_add_to_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a user to a group — aws_user_add_to_group","text":"","code":"if (FALSE) { if (!aws_group_exists(\"testgroup3\")) {   aws_group_create(\"testgroup3\") } if (!aws_user_exists(\"testBlueBird3\")) {   aws_user_create(\"testBlueBird3\") } aws_user_add_to_group(username = \"testBlueBird3\", groupname = \"testgroup3\") }"},{"path":"/reference/aws_user_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a user — aws_user_create","title":"Create a user — aws_user_create","text":"Create user","code":""},{"path":"/reference/aws_user_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a user — aws_user_create","text":"","code":"aws_user_create(username, path = NULL, permission_boundary = NULL, tags = NULL)"},{"path":"/reference/aws_user_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a user — aws_user_create","text":"username (character) user name. required path (character) path user name. optional. included, defaults slash (/). permission_boundary (character) ARN managed policy used set permissions boundary user. optional tags (list) list tags want attach new user. optional","code":""},{"path":"/reference/aws_user_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a user — aws_user_create","text":"tibble information user created","code":""},{"path":"/reference/aws_user_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a user — aws_user_create","text":"See https://www.paws-r-sdk.com/docs/iam_create_user/ docs details parameters","code":""},{"path":"/reference/aws_user_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a user — aws_user_create","text":"","code":"if (FALSE) { aws_user_create(\"testBlueBird\") }"},{"path":"/reference/aws_user_current.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the current logged-in username as a string — aws_user_current","title":"Get the current logged-in username as a string — aws_user_current","text":"Get current logged-username string","code":""},{"path":"/reference/aws_user_current.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the current logged-in username as a string — aws_user_current","text":"","code":"aws_user_current()"},{"path":"/reference/aws_user_current.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the current logged-in username as a string — aws_user_current","text":"username character","code":""},{"path":"/reference/aws_user_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a user — aws_user_delete","title":"Delete a user — aws_user_delete","text":"Delete user","code":""},{"path":"/reference/aws_user_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a user — aws_user_delete","text":"","code":"aws_user_delete(username)"},{"path":"/reference/aws_user_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a user — aws_user_delete","text":"username (character) user name. required","code":""},{"path":"/reference/aws_user_delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a user — aws_user_delete","text":"empty list","code":""},{"path":"/reference/aws_user_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete a user — aws_user_delete","text":"See https://www.paws-r-sdk.com/docs/iam_delete_user/ docs details","code":""},{"path":"/reference/aws_user_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a user — aws_user_delete","text":"","code":"if (FALSE) { aws_user_delete(username = \"testBlueBird\") }"},{"path":"/reference/aws_user_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a user exists — aws_user_exists","title":"Check if a user exists — aws_user_exists","text":"Check user exists","code":""},{"path":"/reference/aws_user_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a user exists — aws_user_exists","text":"","code":"aws_user_exists(username)"},{"path":"/reference/aws_user_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a user exists — aws_user_exists","text":"username (character) user name","code":""},{"path":"/reference/aws_user_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a user exists — aws_user_exists","text":"single boolean","code":""},{"path":"/reference/aws_user_exists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if a user exists — aws_user_exists","text":"uses aws_group internally. see docs https://www.paws-r-sdk.com/docs/iam_get_group/","code":""},{"path":"/reference/aws_user_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a user exists — aws_user_exists","text":"","code":"if (FALSE) { aws_user_exists(aws_user_current()) aws_user_exists(\"blueberry\") }"},{"path":"/reference/aws_users.html","id":null,"dir":"Reference","previous_headings":"","what":"List Users — aws_users","title":"List Users — aws_users","text":"List Users","code":""},{"path":"/reference/aws_users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Users — aws_users","text":"","code":"aws_users(...)"},{"path":"/reference/aws_users.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Users — aws_users","text":"... parameters passed paws list_users method","code":""},{"path":"/reference/aws_users.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Users — aws_users","text":"tibble information user accounts","code":""},{"path":"/reference/aws_users.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Users — aws_users","text":"","code":"if (FALSE) { aws_users() }"},{"path":"/reference/billing.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch billing data — billing","title":"Fetch billing data — billing","text":"Fetch billing data","code":""},{"path":"/reference/billing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch billing data — billing","text":"","code":"billing(date_start, date_end = as.character(Sys.Date()))"},{"path":"/reference/billing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch billing data — billing","text":"date_start, date_end Start end date get billing data . Date format expected: YYYY-MM-DD","code":""},{"path":"/reference/billing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch billing data — billing","text":"","code":"if (FALSE) { billing(date_start = \"2023-01-01\") }"},{"path":"/reference/last.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the last element of a vector — last","title":"Get the last element of a vector — last","text":"Get last element vector","code":""},{"path":"/reference/last.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the last element of a vector — last","text":"","code":"last(x)"},{"path":"/reference/last.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the last element of a vector — last","text":"x vector","code":""},{"path":"/reference/last.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the last element of a vector — last","text":"last element vector","code":""},{"path":"/reference/paginate_aws.html","id":null,"dir":"Reference","previous_headings":"","what":"Paginate over list_* methods — paginate_aws","title":"Paginate over list_* methods — paginate_aws","text":"Paginate list_* methods","code":""},{"path":"/reference/paginate_aws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginate over list_* methods — paginate_aws","text":"","code":"paginate_aws(fun, target, ...)"},{"path":"/reference/paginate_aws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paginate over list_* methods — paginate_aws","text":"fun (function) function call target (character) list element get ... named args passed fun","code":""},{"path":"/reference/paginate_aws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paginate over list_* methods — paginate_aws","text":"","code":"if (FALSE) { # FIXME: could remove target param and poach the name of the fun # e.g,. from list_roles we can get Roles paginate_aws(fun = env64$iam$list_roles, target = \"Roles\") paginate_aws(fun = env64$iam$list_policies, target = \"Policies\") }"},{"path":"/reference/path_as_s3.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a s3 like path to a single format — path_as_s3","title":"Convert a s3 like path to a single format — path_as_s3","text":"Convert s3 like path single format","code":""},{"path":"/reference/path_as_s3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a s3 like path to a single format — path_as_s3","text":"","code":"path_as_s3(paths)"},{"path":"/reference/path_as_s3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a s3 like path to a single format — path_as_s3","text":"paths (character) one s3 paths","code":""},{"path":"/reference/path_as_s3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a s3 like path to a single format — path_as_s3","text":"vector s3 paths (character), form: s3://<bucket>/<path>/<file>","code":""},{"path":"/reference/path_as_s3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a s3 like path to a single format — path_as_s3","text":"","code":"if (FALSE) { # interactive() path_as_s3(\"http://s64-test-3.s3.amazonaws.com/\") path_as_s3(\"https://s64-test-3.s3.amazonaws.com/\") path_as_s3(c(\"https://s64-test-3.s3.amazonaws.com/\",   \"https://mybucket.s3.amazonaws.com/\")) path_as_s3(c(\"apple\", \"banana\", \"pear\", \"pineapple\")) }"},{"path":"/reference/path_s3_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Build s3 paths — path_s3_build","title":"Build s3 paths — path_s3_build","text":"Build s3 paths","code":""},{"path":"/reference/path_s3_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build s3 paths — path_s3_build","text":"","code":"path_s3_build(x)"},{"path":"/reference/path_s3_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build s3 paths — path_s3_build","text":"x unnamed list parsed paths, path_s3_parse()","code":""},{"path":"/reference/path_s3_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build s3 paths — path_s3_build","text":"","code":"if (FALSE) { # interactive() paths <- c(   \"s3://s64-test-2/DESCRIPTION\",   \"s3://s64-test-2/stuff.txt\",   \"s3://s64-test-2/some/other/path/things.csv\" ) x <- path_s3_parse(paths) path_s3_build(x) }"},{"path":"/reference/path_s3_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse s3 paths — path_s3_parse","title":"Parse s3 paths — path_s3_parse","text":"Parse s3 paths","code":""},{"path":"/reference/path_s3_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse s3 paths — path_s3_parse","text":"","code":"path_s3_parse(paths)"},{"path":"/reference/path_s3_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse s3 paths — path_s3_parse","text":"paths (character) one s3 paths","code":""},{"path":"/reference/path_s3_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse s3 paths — path_s3_parse","text":"unnamed list slot named list bucket, path, file","code":""},{"path":"/reference/path_s3_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse s3 paths — path_s3_parse","text":"","code":"if (FALSE) { # interactive() path_s3_parse(\"s3://s64-test-2/DESCRIPTION\") path_s3_parse(\"s3://s64-test-2/some/other/path/things.csv\") paths <- c(   \"s3://s64-test-2/DESCRIPTION\",   \"s3://s64-test-2/stuff.txt\",   \"s3://s64-test-2/some/other/path/things.csv\" ) path_s3_parse(paths)  # if a path is not an s3 path paths <- c(   \"s3://s64-test-2/DESCRIPTION\",   \"s3://s64-test-2/stuff.txt\",   \"s64-test-2/some/other/path/things.csv\" ) path_s3_parse(paths) }"},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. s3fs s3_path","code":""},{"path":"/reference/set_s3_interface.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the S3 compatible interface to use — set_s3_interface","title":"Set the S3 compatible interface to use — set_s3_interface","text":"Set S3 compatible interface use","code":""},{"path":"/reference/set_s3_interface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the S3 compatible interface to use — set_s3_interface","text":"","code":"set_s3_interface(interface = \"aws\")"},{"path":"/reference/set_s3_interface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the S3 compatible interface to use — set_s3_interface","text":"interface s3 compatible interface use. options: \"aws\" (default), \"minio\"","code":""},{"path":"/reference/set_s3_interface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the S3 compatible interface to use — set_s3_interface","text":"paws s3 client object class list","code":""},{"path":"/reference/set_s3_interface.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the S3 compatible interface to use — set_s3_interface","text":"function sets connection details paws s3fs packages, returns something paws function expects access following environment variables: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION MINIO_USER MINIO_PWD MINIO_ENDPOINT s3fs::s3_file_system() set refresh=TRUE can change s3 interface within R session.","code":""},{"path":"/reference/sixtyfour-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sixtyfour: Humane Interface to AWS — sixtyfour-package","title":"sixtyfour: Humane Interface to AWS — sixtyfour-package","text":"Write things give folks sense goal package , high level entrypoints, etc.","code":""},{"path":[]},{"path":"/reference/sixtyfour-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sixtyfour: Humane Interface to AWS — sixtyfour-package","text":"Maintainer: Scott Chamberlain sachamber@fredhutch.org Authors: Sean Kross","code":""}]
